/*

Ratingsandhowtheywork:

-1:Detrimental
Anabilitythatseverelyharmstheuser.
ex.Defeatist,SlowStart

0:Useless
Anabilitywithnooverallbenefitinasinglesbattle.
ex.ColorChange,Plus

1:Ineffective
Anabilitythathasminimaleffectorisonlyusefulinnichesituations.
ex.LightMetal,SuctionCups

2:Useful
Anabilitythatcanbegenerallyuseful.
ex.FlameBody,Overcoat

3:Effective
Anabilitywithastrongeffectontheuserorfoe.
ex.Chlorophyll,Sturdy

4:Veryuseful
Oneofthemorepopularabilities.Itrequiresminimalsupporttobeeffective.
ex.Adaptability,MagicBounce

5:Essential
Thesortofabilitythatdefinesmetagames.
ex.Imposter,ShadowTag

*/

exportconstAbilities:{[abilityid:string]:AbilityData}={
noability:{
isNonstandard:"Past",
name:"NoAbility",
rating:0.1,
num:0,
},
adaptability:{
onModifyMove(move){
move.stab=2;
},
name:"Adaptability",
rating:4,
num:91,
},
aerilate:{
onModifyTypePriority:-1,
onModifyType(move,pokemon){
constnoModifyType=[
'judgment','multiattack','naturalgift','revelationdance','technoblast','terrainpulse','weatherball',
];
if(move.type==='Normal'&&!noModifyType.includes(move.id)&&
!(move.isZ&&move.category!=='Status')&&!(move.name==='TeraBlast'&&pokemon.terastallized)){
move.type='Flying';
move.typeChangerBoosted=this.effect;
}
},
onBasePowerPriority:23,
onBasePower(basePower,pokemon,target,move){
if(move.typeChangerBoosted===this.effect)returnthis.chainModify([4915,4096]);
},
name:"Aerilate",
rating:4,
num:184,
},
aftermath:{
name:"Aftermath",
onDamagingHitOrder:1,
onDamagingHit(damage,target,source,move){
if(!target.hp&&this.checkMoveMakesContact(move,source,target,true)){
this.damage(source.baseMaxhp/4,source,target);
}
},
rating:2,
num:106,
},
airlock:{
onSwitchIn(pokemon){
this.effectState.switchingIn=true;
},
onStart(pokemon){
//AirLockdoesnotactivatewhenSkillSwappedorwhenNeutralizingGasleavesthefield
if(this.effectState.switchingIn){
this.add('-ability',pokemon,'AirLock');
this.effectState.switchingIn=false;
}
this.eachEvent('WeatherChange',this.effect);
},
onEnd(pokemon){
this.eachEvent('WeatherChange',this.effect);
},
suppressWeather:true,
name:"AirLock",
rating:1.5,
num:76,
},
analytic:{
onBasePowerPriority:21,
onBasePower(basePower,pokemon){
letboosted=true;
for(consttargetofthis.getAllActive()){
if(target===pokemon)continue;
if(this.queue.willMove(target)){
boosted=false;
break;
}
}
if(boosted){
this.debug('Analyticboost');
returnthis.chainModify([5325,4096]);
}
},
name:"Analytic",
rating:2.5,
num:148,
},
angerpoint:{
onHit(target,source,move){
if(!target.hp)return;
if(move?.effectType==='Move'&&target.getMoveHitData(move).crit){
this.boost({atk:12},target,target);
}
},
name:"AngerPoint",
rating:1,
num:83,
},
angershell:{
onDamage(damage,target,source,effect){
if(
effect.effectType==="Move"&&
!effect.multihit&&
(!effect.negateSecondary&&!(effect.hasSheerForce&&source.hasAbility('sheerforce')))
){
this.effectState.checkedAngerShell=false;
}else{
this.effectState.checkedAngerShell=true;
}
},
onTryEatItem(item){
consthealingItems=[
'aguavberry','enigmaberry','figyberry','iapapaberry','magoberry','sitrusberry','wikiberry','oranberry','berryjuice',
];
if(healingItems.includes(item.id)){
returnthis.effectState.checkedAngerShell;
}
returntrue;
},
onAfterMoveSecondary(target,source,move){
this.effectState.checkedAngerShell=true;
if(!source||source===target||!target.hp||!move.totalDamage)return;
constlastAttackedBy=target.getLastAttackedBy();
if(!lastAttackedBy)return;
constdamage=move.multihit?move.totalDamage:lastAttackedBy.damage;
if(target.hp<=target.maxhp/2&&target.hp+damage>target.maxhp/2){
this.boost({atk:1,spa:1,spe:1,def:-1,spd:-1},target,target);
}
},
name:"AngerShell",
rating:3,
num:271,
},
anticipation:{
onStart(pokemon){
for(consttargetofpokemon.foes()){
for(constmoveSlotoftarget.moveSlots){
constmove=this.dex.moves.get(moveSlot.move);
if(move.category==='Status')continue;
constmoveType=move.id==='hiddenpower'?target.hpType:move.type;
if(
this.dex.getImmunity(moveType,pokemon)&&this.dex.getEffectiveness(moveType,pokemon)>0||
move.ohko
){
this.add('-ability',pokemon,'Anticipation');
return;
}
}
}
},
name:"Anticipation",
rating:0.5,
num:107,
},
arenatrap:{
onFoeTrapPokemon(pokemon){
if(!pokemon.isAdjacent(this.effectState.target))return;
if(pokemon.isGrounded()){
pokemon.tryTrap(true);
}
},
onFoeMaybeTrapPokemon(pokemon,source){
if(!source)source=this.effectState.target;
if(!source||!pokemon.isAdjacent(source))return;
if(pokemon.isGrounded(!pokemon.knownType)){//Negateimmunityifthetypeisunknown
pokemon.maybeTrapped=true;
}
},
name:"ArenaTrap",
rating:5,
num:71,
},
armortail:{
onFoeTryMove(target,source,move){
consttargetAllExceptions=['perishsong','flowershield','rototiller'];
if(move.target==='foeSide'||(move.target==='all'&&!targetAllExceptions.includes(move.id))){
return;
}

constarmorTailHolder=this.effectState.target;
if((source.isAlly(armorTailHolder)||move.target==='all')&&move.priority>0.1){
this.attrLastMove('[still]');
this.add('cant',armorTailHolder,'ability:ArmorTail',move,'[of]'+target);
returnfalse;
}
},
isBreakable:true,
name:"ArmorTail",
rating:2.5,
num:296,
},
aromaveil:{
onAllyTryAddVolatile(status,target,source,effect){
if(['attract','disable','encore','healblock','taunt','torment'].includes(status.id)){
if(effect.effectType==='Move'){
consteffectHolder=this.effectState.target;
this.add('-block',target,'ability:AromaVeil','[of]'+effectHolder);
}
returnnull;
}
},
isBreakable:true,
name:"AromaVeil",
rating:2,
num:165,
},
asoneglastrier:{
onPreStart(pokemon){
this.add('-ability',pokemon,'AsOne');
this.add('-ability',pokemon,'Unnerve');
this.effectState.unnerved=true;
},
onEnd(){
this.effectState.unnerved=false;
},
onFoeTryEatItem(){
return!this.effectState.unnerved;
},
onSourceAfterFaint(length,target,source,effect){
if(effect&&effect.effectType==='Move'){
this.boost({atk:length},source,source,this.dex.abilities.get('chillingneigh'));
}
},
isPermanent:true,
name:"AsOne(Glastrier)",
rating:3.5,
num:266,
},
asonespectrier:{
onPreStart(pokemon){
this.add('-ability',pokemon,'AsOne');
this.add('-ability',pokemon,'Unnerve');
this.effectState.unnerved=true;
},
onEnd(){
this.effectState.unnerved=false;
},
onFoeTryEatItem(){
return!this.effectState.unnerved;
},
onSourceAfterFaint(length,target,source,effect){
if(effect&&effect.effectType==='Move'){
this.boost({spa:length},source,source,this.dex.abilities.get('grimneigh'));
}
},
isPermanent:true,
name:"AsOne(Spectrier)",
rating:3.5,
num:267,
},
aurabreak:{
onStart(pokemon){
if(this.suppressingAbility(pokemon))return;
this.add('-ability',pokemon,'AuraBreak');
},
onAnyTryPrimaryHit(target,source,move){
if(target===source||move.category==='Status')return;
move.hasAuraBreak=true;
},
isBreakable:true,
name:"AuraBreak",
rating:1,
num:188,
},
baddreams:{
onResidualOrder:28,
onResidualSubOrder:2,
onResidual(pokemon){
if(!pokemon.hp)return;
for(consttargetofpokemon.foes()){
if(target.status==='slp'||target.hasAbility('comatose')){
this.damage(target.baseMaxhp/8,target,pokemon);
}
}
},
name:"BadDreams",
rating:1.5,
num:123,
},
ballfetch:{
name:"BallFetch",
rating:0,
num:237,
},
battery:{
onAllyBasePowerPriority:22,
onAllyBasePower(basePower,attacker,defender,move){
if(attacker!==this.effectState.target&&move.category==='Special'){
this.debug('Batteryboost');
returnthis.chainModify([5325,4096]);
}
},
name:"Battery",
rating:0,
num:217,
},
battlearmor:{
onCriticalHit:false,
isBreakable:true,
name:"BattleArmor",
rating:1,
num:4,
},
battlebond:{
onSourceAfterFaint(length,target,source,effect){
if(effect?.effectType!=='Move')return;
if(source.abilityState.battleBondTriggered)return;
if(source.species.id==='greninja'&&source.hp&&!source.transformed&&source.side.foePokemonLeft()){
this.add('-activate',source,'ability:BattleBond');
this.boost({atk:1,spa:1,spe:1},source,source,this.effect);
source.abilityState.battleBondTriggered=true;
}
},
isNonstandard:"Unobtainable",
isPermanent:true,
name:"BattleBond",
rating:3.5,
num:210,
},
beadsofruin:{
onStart(pokemon){
if(this.suppressingAbility(pokemon))return;
this.add('-ability',pokemon,'BeadsofRuin');
},
onAnyModifySpD(spd,target,source,move){
constabilityHolder=this.effectState.target;
if(target.hasAbility('BeadsofRuin'))return;
if(!move.ruinedSpD?.hasAbility('BeadsofRuin'))move.ruinedSpD=abilityHolder;
if(move.ruinedSpD!==abilityHolder)return;
this.debug('BeadsofRuinSpDdrop');
returnthis.chainModify(0.75);
},
name:"BeadsofRuin",
rating:4.5,
num:284,
},
beastboost:{
onSourceAfterFaint(length,target,source,effect){
if(effect&&effect.effectType==='Move'){
constbestStat=source.getBestStat(true,true);
this.boost({[bestStat]:length},source);
}
},
name:"BeastBoost",
rating:3.5,
num:224,
},
berserk:{
onDamage(damage,target,source,effect){
if(
effect.effectType==="Move"&&
!effect.multihit&&
(!effect.negateSecondary&&!(effect.hasSheerForce&&source.hasAbility('sheerforce')))
){
this.effectState.checkedBerserk=false;
}else{
this.effectState.checkedBerserk=true;
}
},
onTryEatItem(item){
consthealingItems=[
'aguavberry','enigmaberry','figyberry','iapapaberry','magoberry','sitrusberry','wikiberry','oranberry','berryjuice',
];
if(healingItems.includes(item.id)){
returnthis.effectState.checkedBerserk;
}
returntrue;
},
onAfterMoveSecondary(target,source,move){
this.effectState.checkedBerserk=true;
if(!source||source===target||!target.hp||!move.totalDamage)return;
constlastAttackedBy=target.getLastAttackedBy();
if(!lastAttackedBy)return;
constdamage=move.multihit?move.totalDamage:lastAttackedBy.damage;
if(target.hp<=target.maxhp/2&&target.hp+damage>target.maxhp/2){
this.boost({spa:1},target,target);
}
},
name:"Berserk",
rating:2,
num:201,
},
bigpecks:{
onTryBoost(boost,target,source,effect){
if(source&&target===source)return;
if(boost.def&&boost.def<0){
deleteboost.def;
if(!(effectasActiveMove).secondaries&&effect.id!=='octolock'){
this.add("-fail",target,"unboost","Defense","[from]ability:BigPecks","[of]"+target);
}
}
},
isBreakable:true,
name:"BigPecks",
rating:0.5,
num:145,
},
blaze:{
onModifyAtkPriority:5,
onModifyAtk(atk,attacker,defender,move){
if(move.type==='Fire'&&attacker.hp<=attacker.maxhp/3){
this.debug('Blazeboost');
returnthis.chainModify(1.5);
}
},
onModifySpAPriority:5,
onModifySpA(atk,attacker,defender,move){
if(move.type==='Fire'&&attacker.hp<=attacker.maxhp/3){
this.debug('Blazeboost');
returnthis.chainModify(1.5);
}
},
name:"Blaze",
rating:2,
num:66,
},
bulletproof:{
onTryHit(pokemon,target,move){
if(move.flags['bullet']){
this.add('-immune',pokemon,'[from]ability:Bulletproof');
returnnull;
}
},
isBreakable:true,
name:"Bulletproof",
rating:3,
num:171,
},
cheekpouch:{
onEatItem(item,pokemon){
this.heal(pokemon.baseMaxhp/3);
},
name:"CheekPouch",
rating:2,
num:167,
},
chillingneigh:{
onSourceAfterFaint(length,target,source,effect){
if(effect&&effect.effectType==='Move'){
this.boost({atk:length},source);
}
},
name:"ChillingNeigh",
rating:3,
num:264,
},
chlorophyll:{
onModifySpe(spe,pokemon){
if(['sunnyday','desolateland'].includes(pokemon.effectiveWeather())){
returnthis.chainModify(2);
}
},
name:"Chlorophyll",
rating:3,
num:34,
},
clearbody:{
onTryBoost(boost,target,source,effect){
if(source&&target===source)return;
letshowMsg=false;
leti:BoostID;
for(iinboost){
if(boost[i]!<0){
deleteboost[i];
showMsg=true;
}
}
if(showMsg&&!(effectasActiveMove).secondaries&&effect.id!=='octolock'){
this.add("-fail",target,"unboost","[from]ability:ClearBody","[of]"+target);
}
},
isBreakable:true,
name:"ClearBody",
rating:2,
num:29,
},
cloudnine:{
onSwitchIn(pokemon){
this.effectState.switchingIn=true;
},
onStart(pokemon){
//CloudNinedoesnotactivatewhenSkillSwappedorwhenNeutralizingGasleavesthefield
if(this.effectState.switchingIn){
this.add('-ability',pokemon,'CloudNine');
this.effectState.switchingIn=false;
}
this.eachEvent('WeatherChange',this.effect);
},
onEnd(pokemon){
this.eachEvent('WeatherChange',this.effect);
},
suppressWeather:true,
name:"CloudNine",
rating:1.5,
num:13,
},
colorchange:{
onAfterMoveSecondary(target,source,move){
if(!target.hp)return;
consttype=move.type;
if(
target.isActive&&move.effectType==='Move'&&move.category!=='Status'&&
type!=='???'&&!target.hasType(type)
){
if(!target.setType(type))returnfalse;
this.add('-start',target,'typechange',type,'[from]ability:ColorChange');

if(target.side.active.length===2&&target.position===1){
//CurseGlitch
constaction=this.queue.willMove(target);
if(action&&action.move.id==='curse'){
action.targetLoc=-1;
}
}
}
},
name:"ColorChange",
rating:0,
num:16,
},
comatose:{
onStart(pokemon){
this.add('-ability',pokemon,'Comatose');
},
onSetStatus(status,target,source,effect){
if((effectasMove)?.status){
this.add('-immune',target,'[from]ability:Comatose');
}
returnfalse;
},
//Permanentsleep"status"implementedintherelevantsleep-checkingeffects
isPermanent:true,
name:"Comatose",
rating:4,
num:213,
},
commander:{
onUpdate(pokemon){
constally=pokemon.allies()[0];
if(!ally||pokemon.baseSpecies.baseSpecies!=='Tatsugiri'||ally.baseSpecies.baseSpecies!=='Dondozo'){
//Handleanyedgecases
if(pokemon.getVolatile('commanding'))pokemon.removeVolatile('commanding');
return;
}

if(!pokemon.getVolatile('commanding')){
//IfDondozoalreadywascommandedthisfails
if(ally.getVolatile('commanded'))return;
//Cancelallactionsthisturnforpokemonifapplicable
this.queue.cancelAction(pokemon);
//Addvolatilestobothpokemon
this.add('-activate',pokemon,'ability:Commander','[of]'+ally);
pokemon.addVolatile('commanding');
ally.addVolatile('commanded',pokemon);
//Continuedinconditions.tsinthevolatiles
}else{
if(!ally.fainted)return;
pokemon.removeVolatile('commanding');
}
},
isPermanent:true,
name:"Commander",
rating:0,
num:279,
},
competitive:{
onAfterEachBoost(boost,target,source,effect){
if(!source||target.isAlly(source)){
if(effect.id==='stickyweb'){
this.hint("CourtChangeStickyWebcountsasloweringyourownSpeed,andCompetitiveonlyaffectsstatsloweredbyfoes.",true,source.side);
}
return;
}
letstatsLowered=false;
leti:BoostID;
for(iinboost){
if(boost[i]!<0){
statsLowered=true;
}
}
if(statsLowered){
this.boost({spa:2},target,target,null,false,true);
}
},
name:"Competitive",
rating:2.5,
num:172,
},
compoundeyes:{
onSourceModifyAccuracyPriority:-1,
onSourceModifyAccuracy(accuracy){
if(typeofaccuracy!=='number')return;
this.debug('compoundeyes-enhancingaccuracy');
returnthis.chainModify([5325,4096]);
},
name:"CompoundEyes",
rating:3,
num:14,
},
contrary:{
onChangeBoost(boost,target,source,effect){
if(effect&&effect.id==='zpower')return;
leti:BoostID;
for(iinboost){
boost[i]!*=-1;
}
},
isBreakable:true,
name:"Contrary",
rating:4.5,
num:126,
},
corrosion:{
//Implementedinsim/pokemon.js:Pokemon#setStatus
name:"Corrosion",
rating:2.5,
num:212,
},
costar:{
onStart(pokemon){
constally=pokemon.allies()[0];
if(!ally)return;

leti:BoostID;
for(iinally.boosts){
pokemon.boosts[i]=ally.boosts[i];
}
constvolatilesToCopy=['focusenergy','gmaxchistrike','laserfocus'];
for(constvolatileofvolatilesToCopy){
if(ally.volatiles[volatile]){
pokemon.addVolatile(volatile);
if(volatile==='gmaxchistrike')pokemon.volatiles[volatile].layers=ally.volatiles[volatile].layers;
}else{
pokemon.removeVolatile(volatile);
}
}
this.add('-copyboost',pokemon,ally,'[from]ability:Costar');
},
name:"Costar",
rating:0,
num:294,
},
cottondown:{
onDamagingHit(damage,target,source,move){
letactivated=false;
for(constpokemonofthis.getAllActive()){
if(pokemon===target||pokemon.fainted)continue;
if(!activated){
this.add('-ability',target,'CottonDown');
activated=true;
}
this.boost({spe:-1},pokemon,target,null,true);
}
},
name:"CottonDown",
rating:2,
num:238,
},
cudchew:{
onEatItem(item,pokemon){
if(item.isBerry&&pokemon.addVolatile('cudchew')){
pokemon.volatiles['cudchew'].berry=item;
}
},
onEnd(pokemon){
deletepokemon.volatiles['cudchew'];
},
condition:{
noCopy:true,
duration:2,
onRestart(){
this.effectState.duration=2;
},
onResidualOrder:28,
onResidualSubOrder:2,
onEnd(pokemon){
if(pokemon.hp){
constitem=this.effectState.berry;
this.add('-activate',pokemon,'ability:CudChew');
this.add('-enditem',pokemon,item.name,'[eat]');
if(this.singleEvent('Eat',item,null,pokemon,null,null)){
this.runEvent('EatItem',pokemon,null,null,item);
}
if(item.onEat)pokemon.ateBerry=true;
}
},
},
name:"CudChew",
rating:2,
num:291,
},
curiousmedicine:{
onStart(pokemon){
for(constallyofpokemon.adjacentAllies()){
ally.clearBoosts();
this.add('-clearboost',ally,'[from]ability:CuriousMedicine','[of]'+pokemon);
}
},
name:"CuriousMedicine",
rating:0,
num:261,
},
cursedbody:{
onDamagingHit(damage,target,source,move){
if(source.volatiles['disable'])return;
if(!move.isMax&&!move.flags['futuremove']&&move.id!=='struggle'){
if(this.randomChance(3,10)){
source.addVolatile('disable',this.effectState.target);
}
}
},
name:"CursedBody",
rating:2,
num:130,
},
cutecharm:{
onDamagingHit(damage,target,source,move){
if(this.checkMoveMakesContact(move,source,target)){
if(this.randomChance(3,10)){
source.addVolatile('attract',this.effectState.target);
}
}
},
name:"CuteCharm",
rating:0.5,
num:56,
},
damp:{
onAnyTryMove(target,source,effect){
if(['explosion','mindblown','mistyexplosion','selfdestruct'].includes(effect.id)){
this.attrLastMove('[still]');
this.add('cant',this.effectState.target,'ability:Damp',effect,'[of]'+target);
returnfalse;
}
},
onAnyDamage(damage,target,source,effect){
if(effect&&effect.name==='Aftermath'){
returnfalse;
}
},
isBreakable:true,
name:"Damp",
rating:0.5,
num:6,
},
dancer:{
name:"Dancer",
//implementedinrunMoveinscripts.js
rating:1.5,
num:216,
},
darkaura:{
onStart(pokemon){
if(this.suppressingAbility(pokemon))return;
this.add('-ability',pokemon,'DarkAura');
},
onAnyBasePowerPriority:20,
onAnyBasePower(basePower,source,target,move){
if(target===source||move.category==='Status'||move.type!=='Dark')return;
if(!move.auraBooster?.hasAbility('DarkAura'))move.auraBooster=this.effectState.target;
if(move.auraBooster!==this.effectState.target)return;
returnthis.chainModify([move.hasAuraBreak?3072:5448,4096]);
},
name:"DarkAura",
rating:3,
num:186,
},
dauntlessshield:{
onStart(pokemon){
if(this.effectState.shieldBoost)return;
if(this.boost({def:1},pokemon)){
this.effectState.shieldBoost=true;
}
},
name:"DauntlessShield",
rating:3.5,
num:235,
},
dazzling:{
onFoeTryMove(target,source,move){
consttargetAllExceptions=['perishsong','flowershield','rototiller'];
if(move.target==='foeSide'||(move.target==='all'&&!targetAllExceptions.includes(move.id))){
return;
}

constdazzlingHolder=this.effectState.target;
if((source.isAlly(dazzlingHolder)||move.target==='all')&&move.priority>0.1){
this.attrLastMove('[still]');
this.add('cant',dazzlingHolder,'ability:Dazzling',move,'[of]'+target);
returnfalse;
}
},
isBreakable:true,
name:"Dazzling",
rating:2.5,
num:219,
},
defeatist:{
onModifyAtkPriority:5,
onModifyAtk(atk,pokemon){
if(pokemon.hp<=pokemon.maxhp/2){
returnthis.chainModify(0.5);
}
},
onModifySpAPriority:5,
onModifySpA(atk,pokemon){
if(pokemon.hp<=pokemon.maxhp/2){
returnthis.chainModify(0.5);
}
},
name:"Defeatist",
rating:-1,
num:129,
},
defiant:{
onAfterEachBoost(boost,target,source,effect){
if(!source||target.isAlly(source)){
if(effect.id==='stickyweb'){
this.hint("CourtChangeStickyWebcountsasloweringyourownSpeed,andDefiantonlyaffectsstatsloweredbyfoes.",true,source.side);
}
return;
}
letstatsLowered=false;
leti:BoostID;
for(iinboost){
if(boost[i]!<0){
statsLowered=true;
}
}
if(statsLowered){
this.boost({atk:2},target,target,null,false,true);
}
},
name:"Defiant",
rating:3,
num:128,
},
deltastream:{
onStart(source){
this.field.setWeather('deltastream');
},
onAnySetWeather(target,source,weather){
conststrongWeathers=['desolateland','primordialsea','deltastream'];
if(this.field.getWeather().id==='deltastream'&&!strongWeathers.includes(weather.id))returnfalse;
},
onEnd(pokemon){
if(this.field.weatherState.source!==pokemon)return;
for(consttargetofthis.getAllActive()){
if(target===pokemon)continue;
if(target.hasAbility('deltastream')){
this.field.weatherState.source=target;
return;
}
}
this.field.clearWeather();
},
name:"DeltaStream",
rating:4,
num:191,
},
desolateland:{
onStart(source){
this.field.setWeather('desolateland');
},
onAnySetWeather(target,source,weather){
conststrongWeathers=['desolateland','primordialsea','deltastream'];
if(this.field.getWeather().id==='desolateland'&&!strongWeathers.includes(weather.id))returnfalse;
},
onEnd(pokemon){
if(this.field.weatherState.source!==pokemon)return;
for(consttargetofthis.getAllActive()){
if(target===pokemon)continue;
if(target.hasAbility('desolateland')){
this.field.weatherState.source=target;
return;
}
}
this.field.clearWeather();
},
name:"DesolateLand",
rating:4.5,
num:190,
},
disguise:{
onDamagePriority:1,
onDamage(damage,target,source,effect){
if(
effect&&effect.effectType==='Move'&&
['mimikyu','mimikyutotem'].includes(target.species.id)&&!target.transformed
){
this.add('-activate',target,'ability:Disguise');
this.effectState.busted=true;
return0;
}
},
onCriticalHit(target,source,move){
if(!target)return;
if(!['mimikyu','mimikyutotem'].includes(target.species.id)||target.transformed){
return;
}
consthitSub=target.volatiles['substitute']&&!move.flags['bypasssub']&&!(move.infiltrates&&this.gen>=6);
if(hitSub)return;

if(!target.runImmunity(move.type))return;
returnfalse;
},
onEffectiveness(typeMod,target,type,move){
if(!target||move.category==='Status')return;
if(!['mimikyu','mimikyutotem'].includes(target.species.id)||target.transformed){
return;
}

consthitSub=target.volatiles['substitute']&&!move.flags['bypasssub']&&!(move.infiltrates&&this.gen>=6);
if(hitSub)return;

if(!target.runImmunity(move.type))return;
return0;
},
onUpdate(pokemon){
if(['mimikyu','mimikyutotem'].includes(pokemon.species.id)&&this.effectState.busted){
constspeciesid=pokemon.species.id==='mimikyutotem'?'Mimikyu-Busted-Totem':'Mimikyu-Busted';
pokemon.formeChange(speciesid,this.effect,true);
this.damage(pokemon.baseMaxhp/8,pokemon,pokemon,this.dex.species.get(speciesid));
}
},
isBreakable:true,
isPermanent:true,
name:"Disguise",
rating:3.5,
num:209,
},
download:{
onStart(pokemon){
lettotaldef=0;
lettotalspd=0;
for(consttargetofpokemon.foes()){
totaldef+=target.getStat('def',false,true);
totalspd+=target.getStat('spd',false,true);
}
if(totaldef&&totaldef>=totalspd){
this.boost({spa:1});
}elseif(totalspd){
this.boost({atk:1});
}
},
name:"Download",
rating:3.5,
num:88,
},
dragonsmaw:{
onModifyAtkPriority:5,
onModifyAtk(atk,attacker,defender,move){
if(move.type==='Dragon'){
this.debug('Dragon\'sMawboost');
returnthis.chainModify(1.5);
}
},
onModifySpAPriority:5,
onModifySpA(atk,attacker,defender,move){
if(move.type==='Dragon'){
this.debug('Dragon\'sMawboost');
returnthis.chainModify(1.5);
}
},
name:"Dragon'sMaw",
rating:3.5,
num:263,
},
drizzle:{
onStart(source){
for(constactionofthis.queue){
if(action.choice==='runPrimal'&&action.pokemon===source&&source.species.id==='kyogre')return;
if(action.choice!=='runSwitch'&&action.choice!=='runPrimal')break;
}
this.field.setWeather('raindance');
},
name:"Drizzle",
rating:4,
num:2,
},
drought:{
onStart(source){
for(constactionofthis.queue){
if(action.choice==='runPrimal'&&action.pokemon===source&&source.species.id==='groudon')return;
if(action.choice!=='runSwitch'&&action.choice!=='runPrimal')break;
}
this.field.setWeather('sunnyday');
},
name:"Drought",
rating:4,
num:70,
},
dryskin:{
onTryHit(target,source,move){
if(target!==source&&move.type==='Water'){
if(!this.heal(target.baseMaxhp/4)){
this.add('-immune',target,'[from]ability:DrySkin');
}
returnnull;
}
},
onSourceBasePowerPriority:17,
onSourceBasePower(basePower,attacker,defender,move){
if(move.type==='Fire'){
returnthis.chainModify(1.25);
}
},
onWeather(target,source,effect){
if(target.hasItem('utilityumbrella'))return;
if(effect.id==='raindance'||effect.id==='primordialsea'){
this.heal(target.baseMaxhp/8);
}elseif(effect.id==='sunnyday'||effect.id==='desolateland'){
this.damage(target.baseMaxhp/8,target,target);
}
},
isBreakable:true,
name:"DrySkin",
rating:3,
num:87,
},
earlybird:{
name:"EarlyBird",
//Implementedinstatuses.js
rating:1.5,
num:48,
},
eartheater:{
onTryHit(target,source,move){
if(target!==source&&move.type==='Ground'){
if(!this.heal(target.baseMaxhp/4)){
this.add('-immune',target,'[from]ability:EarthEater');
}
returnnull;
}
},
isBreakable:true,
name:"EarthEater",
rating:3.5,
num:297,
},
effectspore:{
onDamagingHit(damage,target,source,move){
if(this.checkMoveMakesContact(move,source,target)&&!source.status&&source.runStatusImmunity('powder')){
constr=this.random(100);
if(r<11){
source.setStatus('slp',target);
}elseif(r<21){
source.setStatus('par',target);
}elseif(r<30){
source.setStatus('psn',target);
}
}
},
name:"EffectSpore",
rating:2,
num:27,
},
electricsurge:{
onStart(source){
this.field.setTerrain('electricterrain');
},
name:"ElectricSurge",
rating:4,
num:226,
},
electromorphosis:{
onDamagingHitOrder:1,
onDamagingHit(damage,target,source,move){
target.addVolatile('charge');
},
name:"Electromorphosis",
rating:2.5,
num:280,
},
emergencyexit:{
onEmergencyExit(target){
if(!this.canSwitch(target.side)||target.forceSwitchFlag||target.switchFlag)return;
for(constsideofthis.sides){
for(constactiveofside.active){
active.switchFlag=false;
}
}
target.switchFlag=true;
this.add('-activate',target,'ability:EmergencyExit');
},
name:"EmergencyExit",
rating:1,
num:194,
},
fairyaura:{
onStart(pokemon){
if(this.suppressingAbility(pokemon))return;
this.add('-ability',pokemon,'FairyAura');
},
onAnyBasePowerPriority:20,
onAnyBasePower(basePower,source,target,move){
if(target===source||move.category==='Status'||move.type!=='Fairy')return;
if(!move.auraBooster?.hasAbility('FairyAura'))move.auraBooster=this.effectState.target;
if(move.auraBooster!==this.effectState.target)return;
returnthis.chainModify([move.hasAuraBreak?3072:5448,4096]);
},
name:"FairyAura",
rating:3,
num:187,
},
filter:{
onSourceModifyDamage(damage,source,target,move){
if(target.getMoveHitData(move).typeMod>0){
this.debug('Filterneutralize');
returnthis.chainModify(0.75);
}
},
isBreakable:true,
name:"Filter",
rating:3,
num:111,
},
flamebody:{
onDamagingHit(damage,target,source,move){
if(this.checkMoveMakesContact(move,source,target)){
if(this.randomChance(3,10)){
source.trySetStatus('brn',target);
}
}
},
name:"FlameBody",
rating:2,
num:49,
},
flareboost:{
onBasePowerPriority:19,
onBasePower(basePower,attacker,defender,move){
if(attacker.status==='brn'&&move.category==='Special'){
returnthis.chainModify(1.5);
}
},
name:"FlareBoost",
rating:2,
num:138,
},
flashfire:{
onTryHit(target,source,move){
if(target!==source&&move.type==='Fire'){
move.accuracy=true;
if(!target.addVolatile('flashfire')){
this.add('-immune',target,'[from]ability:FlashFire');
}
returnnull;
}
},
onEnd(pokemon){
pokemon.removeVolatile('flashfire');
},
condition:{
noCopy:true,//doesn'tgetcopiedbyBatonPass
onStart(target){
this.add('-start',target,'ability:FlashFire');
},
onModifyAtkPriority:5,
onModifyAtk(atk,attacker,defender,move){
if(move.type==='Fire'&&attacker.hasAbility('flashfire')){
this.debug('FlashFireboost');
returnthis.chainModify(1.5);
}
},
onModifySpAPriority:5,
onModifySpA(atk,attacker,defender,move){
if(move.type==='Fire'&&attacker.hasAbility('flashfire')){
this.debug('FlashFireboost');
returnthis.chainModify(1.5);
}
},
onEnd(target){
this.add('-end',target,'ability:FlashFire','[silent]');
},
},
isBreakable:true,
name:"FlashFire",
rating:3.5,
num:18,
},
flowergift:{
onStart(pokemon){
this.singleEvent('WeatherChange',this.effect,this.effectState,pokemon);
},
onWeatherChange(pokemon){
if(!pokemon.isActive||pokemon.baseSpecies.baseSpecies!=='Cherrim'||pokemon.transformed)return;
if(!pokemon.hp)return;
if(['sunnyday','desolateland'].includes(pokemon.effectiveWeather())){
if(pokemon.species.id!=='cherrimsunshine'){
pokemon.formeChange('Cherrim-Sunshine',this.effect,false,'[msg]');
}
}else{
if(pokemon.species.id==='cherrimsunshine'){
pokemon.formeChange('Cherrim',this.effect,false,'[msg]');
}
}
},
onAllyModifyAtkPriority:3,
onAllyModifyAtk(atk,pokemon){
if(this.effectState.target.baseSpecies.baseSpecies!=='Cherrim')return;
if(['sunnyday','desolateland'].includes(pokemon.effectiveWeather())){
returnthis.chainModify(1.5);
}
},
onAllyModifySpDPriority:4,
onAllyModifySpD(spd,pokemon){
if(this.effectState.target.baseSpecies.baseSpecies!=='Cherrim')return;
if(['sunnyday','desolateland'].includes(pokemon.effectiveWeather())){
returnthis.chainModify(1.5);
}
},
isBreakable:true,
name:"FlowerGift",
rating:1,
num:122,
},
flowerveil:{
onAllyTryBoost(boost,target,source,effect){
if((source&&target===source)||!target.hasType('Grass'))return;
letshowMsg=false;
leti:BoostID;
for(iinboost){
if(boost[i]!<0){
deleteboost[i];
showMsg=true;
}
}
if(showMsg&&!(effectasActiveMove).secondaries){
consteffectHolder=this.effectState.target;
this.add('-block',target,'ability:FlowerVeil','[of]'+effectHolder);
}
},
onAllySetStatus(status,target,source,effect){
if(target.hasType('Grass')&&source&&target!==source&&effect&&effect.id!=='yawn'){
this.debug('interruptingsetStatuswithFlowerVeil');
if(effect.name==='Synchronize'||(effect.effectType==='Move'&&!effect.secondaries)){
consteffectHolder=this.effectState.target;
this.add('-block',target,'ability:FlowerVeil','[of]'+effectHolder);
}
returnnull;
}
},
onAllyTryAddVolatile(status,target){
if(target.hasType('Grass')&&status.id==='yawn'){
this.debug('FlowerVeilblockingyawn');
consteffectHolder=this.effectState.target;
this.add('-block',target,'ability:FlowerVeil','[of]'+effectHolder);
returnnull;
}
},
isBreakable:true,
name:"FlowerVeil",
rating:0,
num:166,
},
fluffy:{
onSourceModifyDamage(damage,source,target,move){
letmod=1;
if(move.type==='Fire')mod*=2;
if(move.flags['contact'])mod/=2;
returnthis.chainModify(mod);
},
isBreakable:true,
name:"Fluffy",
rating:3.5,
num:218,
},
forecast:{
onStart(pokemon){
this.singleEvent('WeatherChange',this.effect,this.effectState,pokemon);
},
onWeatherChange(pokemon){
if(pokemon.baseSpecies.baseSpecies!=='Castform'||pokemon.transformed)return;
letforme=null;
switch(pokemon.effectiveWeather()){
case'sunnyday':
case'desolateland':
if(pokemon.species.id!=='castformsunny')forme='Castform-Sunny';
break;
case'raindance':
case'primordialsea':
if(pokemon.species.id!=='castformrainy')forme='Castform-Rainy';
break;
case'hail':
case'snow':
if(pokemon.species.id!=='castformsnowy')forme='Castform-Snowy';
break;
default:
if(pokemon.species.id!=='castform')forme='Castform';
break;
}
if(pokemon.isActive&&forme){
pokemon.formeChange(forme,this.effect,false,'[msg]');
}
},
name:"Forecast",
rating:2,
num:59,
},
forewarn:{
onStart(pokemon){
letwarnMoves:(Move|Pokemon)[][]=[];
letwarnBp=1;
for(consttargetofpokemon.foes()){
for(constmoveSlotoftarget.moveSlots){
constmove=this.dex.moves.get(moveSlot.move);
letbp=move.basePower;
if(move.ohko)bp=150;
if(move.id==='counter'||move.id==='metalburst'||move.id==='mirrorcoat')bp=120;
if(bp===1)bp=80;
if(!bp&&move.category!=='Status')bp=80;
if(bp>warnBp){
warnMoves=[[move,target]];
warnBp=bp;
}elseif(bp===warnBp){
warnMoves.push([move,target]);
}
}
}
if(!warnMoves.length)return;
const[warnMoveName,warnTarget]=this.sample(warnMoves);
this.add('-activate',pokemon,'ability:Forewarn',warnMoveName,'[of]'+warnTarget);
},
name:"Forewarn",
rating:0.5,
num:108,
},
friendguard:{
name:"FriendGuard",
onAnyModifyDamage(damage,source,target,move){
if(target!==this.effectState.target&&target.isAlly(this.effectState.target)){
this.debug('FriendGuardweaken');
returnthis.chainModify(0.75);
}
},
isBreakable:true,
rating:0,
num:132,
},
frisk:{
onStart(pokemon){
for(consttargetofpokemon.foes()){
if(target.item){
this.add('-item',target,target.getItem().name,'[from]ability:Frisk','[of]'+pokemon,'[identify]');
}
}
},
name:"Frisk",
rating:1.5,
num:119,
},
fullmetalbody:{
onTryBoost(boost,target,source,effect){
if(source&&target===source)return;
letshowMsg=false;
leti:BoostID;
for(iinboost){
if(boost[i]!<0){
deleteboost[i];
showMsg=true;
}
}
if(showMsg&&!(effectasActiveMove).secondaries&&effect.id!=='octolock'){
this.add("-fail",target,"unboost","[from]ability:FullMetalBody","[of]"+target);
}
},
name:"FullMetalBody",
rating:2,
num:230,
},
furcoat:{
onModifyDefPriority:6,
onModifyDef(def){
returnthis.chainModify(2);
},
isBreakable:true,
name:"FurCoat",
rating:4,
num:169,
},
galewings:{
onModifyPriority(priority,pokemon,target,move){
if(move?.type==='Flying'&&pokemon.hp===pokemon.maxhp)returnpriority+1;
},
name:"GaleWings",
rating:2.5,
num:177,
},
galvanize:{
onModifyTypePriority:-1,
onModifyType(move,pokemon){
constnoModifyType=[
'judgment','multiattack','naturalgift','revelationdance','technoblast','terrainpulse','weatherball',
];
if(move.type==='Normal'&&!noModifyType.includes(move.id)&&
!(move.isZ&&move.category!=='Status')&&!(move.name==='TeraBlast'&&pokemon.terastallized)){
move.type='Electric';
move.typeChangerBoosted=this.effect;
}
},
onBasePowerPriority:23,
onBasePower(basePower,pokemon,target,move){
if(move.typeChangerBoosted===this.effect)returnthis.chainModify([4915,4096]);
},
name:"Galvanize",
rating:4,
num:206,
},
gluttony:{
name:"Gluttony",
rating:1.5,
num:82,
onStart(pokemon){
pokemon.abilityState.gluttony=true;
},
onDamage(item,pokemon){
pokemon.abilityState.gluttony=true;
},

},
goodasgold:{
onTryHit(target,source,move){
if(move.category==='Status'&&target!==source){
this.add('-immune',target,'[from]ability:GoodasGold');
returnnull;
}
},
isBreakable:true,
name:"GoodasGold",
rating:5,
num:283,
},
gooey:{
onDamagingHit(damage,target,source,move){
if(this.checkMoveMakesContact(move,source,target,true)){
this.add('-ability',target,'Gooey');
this.boost({spe:-1},source,target,null,true);
}
},
name:"Gooey",
rating:2,
num:183,
},
gorillatactics:{
onStart(pokemon){
pokemon.abilityState.choiceLock="";
},
onBeforeMove(pokemon,target,move){
if(move.isZOrMaxPowered||move.id==='struggle')return;
if(pokemon.abilityState.choiceLock&&pokemon.abilityState.choiceLock!==move.id){
//Failsunlessabilityisbeingignored(theseeventswillnotrun),noPPlost.
this.addMove('move',pokemon,move.name);
this.attrLastMove('[still]');
this.debug("DisabledbyGorillaTactics");
this.add('-fail',pokemon);
returnfalse;
}
},
onModifyMove(move,pokemon){
if(pokemon.abilityState.choiceLock||move.isZOrMaxPowered||move.id==='struggle')return;
pokemon.abilityState.choiceLock=move.id;
},
onModifyAtkPriority:1,
onModifyAtk(atk,pokemon){
if(pokemon.volatiles['dynamax'])return;
//PLACEHOLDER
this.debug('GorillaTacticsAtkBoost');
returnthis.chainModify(1.5);
},
onDisableMove(pokemon){
if(!pokemon.abilityState.choiceLock)return;
if(pokemon.volatiles['dynamax'])return;
for(constmoveSlotofpokemon.moveSlots){
if(moveSlot.id!==pokemon.abilityState.choiceLock){
pokemon.disableMove(moveSlot.id,false,this.effectState.sourceEffect);
}
}
},
onEnd(pokemon){
pokemon.abilityState.choiceLock="";
},
name:"GorillaTactics",
rating:4.5,
num:255,
},
grasspelt:{
onModifyDefPriority:6,
onModifyDef(pokemon){
if(this.field.isTerrain('grassyterrain'))returnthis.chainModify(1.5);
},
isBreakable:true,
name:"GrassPelt",
rating:0.5,
num:179,
},
grassysurge:{
onStart(source){
this.field.setTerrain('grassyterrain');
},
name:"GrassySurge",
rating:4,
num:229,
},
grimneigh:{
onSourceAfterFaint(length,target,source,effect){
if(effect&&effect.effectType==='Move'){
this.boost({spa:length},source);
}
},
name:"GrimNeigh",
rating:3,
num:265,
},
guarddog:{
onDragOutPriority:1,
onDragOut(pokemon){
this.add('-activate',pokemon,'ability:GuardDog');
returnnull;
},
onTryBoost(boost,target,source,effect){
if(effect.name==='Intimidate'&&boost.atk){
deleteboost.atk;
this.boost({atk:1},target,target,null,false,true);
}
},
name:"GuardDog",
rating:2,
num:275,
},
gulpmissile:{
onDamagingHit(damage,target,source,move){
if(!source.hp||!source.isActive||target.transformed||target.isSemiInvulnerable())return;
if(['cramorantgulping','cramorantgorging'].includes(target.species.id)){
this.damage(source.baseMaxhp/4,source,target);
if(target.species.id==='cramorantgulping'){
this.boost({def:-1},source,target,null,true);
}else{
source.trySetStatus('par',target,move);
}
target.formeChange('cramorant',move);
}
},
//TheDivepartofthismechanicisimplementedinDive's`onTryMove`inmoves.ts
onSourceTryPrimaryHit(target,source,effect){
if(
effect&&effect.id==='surf'&&source.hasAbility('gulpmissile')&&
source.species.name==='Cramorant'&&!source.transformed
){
constforme=source.hp<=source.maxhp/2?'cramorantgorging':'cramorantgulping';
source.formeChange(forme,effect);
}
},
isPermanent:true,
name:"GulpMissile",
rating:2.5,
num:241,
},
guts:{
onModifyAtkPriority:5,
onModifyAtk(atk,pokemon){
if(pokemon.status){
returnthis.chainModify(1.5);
}
},
name:"Guts",
rating:3.5,
num:62,
},
hadronengine:{
onStart(pokemon){
if(!this.field.setTerrain('electricterrain')&&this.field.isTerrain('electricterrain')){
this.add('-activate',pokemon,'ability:HadronEngine');
}
},
onModifySpAPriority:5,
onModifySpA(atk,attacker,defender,move){
if(this.field.isTerrain('electricterrain')){
this.debug('HadronEngineboost');
returnthis.chainModify([5461,4096]);
}
},
isPermanent:true,
name:"HadronEngine",
rating:4.5,
num:289,
},
harvest:{
name:"Harvest",
onResidualOrder:28,
onResidualSubOrder:2,
onResidual(pokemon){
if(this.field.isWeather(['sunnyday','desolateland'])||this.randomChance(1,2)){
if(pokemon.hp&&!pokemon.item&&this.dex.items.get(pokemon.lastItem).isBerry){
pokemon.setItem(pokemon.lastItem);
pokemon.lastItem='';
this.add('-item',pokemon,pokemon.getItem(),'[from]ability:Harvest');
}
}
},
rating:2.5,
num:139,
},
healer:{
name:"Healer",
onResidualOrder:5,
onResidualSubOrder:3,
onResidual(pokemon){
for(constallyActiveofpokemon.adjacentAllies()){
if(allyActive.status&&this.randomChance(3,10)){
this.add('-activate',pokemon,'ability:Healer');
allyActive.cureStatus();
}
}
},
rating:0,
num:131,
},
heatproof:{
onSourceBasePowerPriority:18,
onSourceBasePower(basePower,attacker,defender,move){
if(move.type==='Fire'){
returnthis.chainModify(0.5);
}
},
onDamage(damage,target,source,effect){
if(effect&&effect.id==='brn'){
returndamage/2;
}
},
isBreakable:true,
name:"Heatproof",
rating:2,
num:85,
},
heavymetal:{
onModifyWeightPriority:1,
onModifyWeight(weighthg){
returnweighthg*2;
},
isBreakable:true,
name:"HeavyMetal",
rating:0,
num:134,
},
honeygather:{
name:"HoneyGather",
rating:0,
num:118,
},
hugepower:{
onModifyAtkPriority:5,
onModifyAtk(atk){
returnthis.chainModify(2);
},
name:"HugePower",
rating:5,
num:37,
},
hungerswitch:{
onResidualOrder:29,
onResidual(pokemon){
if(pokemon.species.baseSpecies!=='Morpeko'||pokemon.transformed)return;
consttargetForme=pokemon.species.name==='Morpeko'?'Morpeko-Hangry':'Morpeko';
pokemon.formeChange(targetForme);
},
name:"HungerSwitch",
rating:1,
num:258,
},
hustle:{
//Thisshouldbeapplieddirectlytothestatasopposedtochainingwiththeothers
onModifyAtkPriority:5,
onModifyAtk(atk){
returnthis.modify(atk,1.5);
},
onSourceModifyAccuracyPriority:-1,
onSourceModifyAccuracy(accuracy,target,source,move){
if(move.category==='Physical'&&typeofaccuracy==='number'){
returnthis.chainModify([3277,4096]);
}
},
name:"Hustle",
rating:3.5,
num:55,
},
hydration:{
onResidualOrder:5,
onResidualSubOrder:3,
onResidual(pokemon){
if(pokemon.status&&['raindance','primordialsea'].includes(pokemon.effectiveWeather())){
this.debug('hydration');
this.add('-activate',pokemon,'ability:Hydration');
pokemon.cureStatus();
}
},
name:"Hydration",
rating:1.5,
num:93,
},
hypercutter:{
onTryBoost(boost,target,source,effect){
if(source&&target===source)return;
if(boost.atk&&boost.atk<0){
deleteboost.atk;
if(!(effectasActiveMove).secondaries){
this.add("-fail",target,"unboost","Attack","[from]ability:HyperCutter","[of]"+target);
}
}
},
isBreakable:true,
name:"HyperCutter",
rating:1.5,
num:52,
},
icebody:{
onWeather(target,source,effect){
if(effect.id==='hail'||effect.id==='snow'){
this.heal(target.baseMaxhp/16);
}
},
onImmunity(type,pokemon){
if(type==='hail')returnfalse;
},
name:"IceBody",
rating:1,
num:115,
},
iceface:{
onStart(pokemon){
if(this.field.isWeather(['hail','snow'])&&
pokemon.species.id==='eiscuenoice'&&!pokemon.transformed){
this.add('-activate',pokemon,'ability:IceFace');
this.effectState.busted=false;
pokemon.formeChange('Eiscue',this.effect,true);
}
},
onDamagePriority:1,
onDamage(damage,target,source,effect){
if(
effect&&effect.effectType==='Move'&&effect.category==='Physical'&&
target.species.id==='eiscue'&&!target.transformed
){
this.add('-activate',target,'ability:IceFace');
this.effectState.busted=true;
return0;
}
},
onCriticalHit(target,type,move){
if(!target)return;
if(move.category!=='Physical'||target.species.id!=='eiscue'||target.transformed)return;
if(target.volatiles['substitute']&&!(move.flags['bypasssub']||move.infiltrates))return;
if(!target.runImmunity(move.type))return;
returnfalse;
},
onEffectiveness(typeMod,target,type,move){
if(!target)return;
if(move.category!=='Physical'||target.species.id!=='eiscue'||target.transformed)return;

consthitSub=target.volatiles['substitute']&&!move.flags['bypasssub']&&!(move.infiltrates&&this.gen>=6);
if(hitSub)return;

if(!target.runImmunity(move.type))return;
return0;
},
onUpdate(pokemon){
if(pokemon.species.id==='eiscue'&&this.effectState.busted){
pokemon.formeChange('Eiscue-Noice',this.effect,true);
}
},
onWeatherChange(pokemon,source,sourceEffect){
//snow/hailresumingbecauseCloudNine/AirLockendeddoesnottriggerIceFace
if((sourceEffectasAbility)?.suppressWeather)return;
if(!pokemon.hp)return;
if(this.field.isWeather(['hail','snow'])&&
pokemon.species.id==='eiscuenoice'&&!pokemon.transformed){
this.add('-activate',pokemon,'ability:IceFace');
this.effectState.busted=false;
pokemon.formeChange('Eiscue',this.effect,true);
}
},
isBreakable:true,
isPermanent:true,
name:"IceFace",
rating:3,
num:248,
},
icescales:{
onSourceModifyDamage(damage,source,target,move){
if(move.category==='Special'){
returnthis.chainModify(0.5);
}
},
isBreakable:true,
name:"IceScales",
rating:4,
num:246,
},
illuminate:{
name:"Illuminate",
rating:0,
num:35,
},
illusion:{
onBeforeSwitchIn(pokemon){
pokemon.illusion=null;
//yes,youcanIllusionanactivepokemonbutonlyifit'stoyourright
for(leti=pokemon.side.pokemon.length-1;i>pokemon.position;i--){
constpossibleTarget=pokemon.side.pokemon[i];
if(!possibleTarget.fainted){
pokemon.illusion=possibleTarget;
break;
}
}
},
onDamagingHit(damage,target,source,move){
if(target.illusion){
this.singleEvent('End',this.dex.abilities.get('Illusion'),target.abilityState,target,source,move);
}
},
onEnd(pokemon){
if(pokemon.illusion){
this.debug('illusioncleared');
pokemon.illusion=null;
constdetails=pokemon.species.name+(pokemon.level===100?'':',L'+pokemon.level)+
(pokemon.gender===''?'':','+pokemon.gender)+(pokemon.set.shiny?',shiny':'');
this.add('replace',pokemon,details);
this.add('-end',pokemon,'Illusion');
}
},
onFaint(pokemon){
pokemon.illusion=null;
},
name:"Illusion",
rating:4.5,
num:149,
},
immunity:{
onUpdate(pokemon){
if(pokemon.status==='psn'||pokemon.status==='tox'){
this.add('-activate',pokemon,'ability:Immunity');
pokemon.cureStatus();
}
},
onSetStatus(status,target,source,effect){
if(status.id!=='psn'&&status.id!=='tox')return;
if((effectasMove)?.status){
this.add('-immune',target,'[from]ability:Immunity');
}
returnfalse;
},
isBreakable:true,
name:"Immunity",
rating:2,
num:17,
},
imposter:{
onSwitchIn(pokemon){
this.effectState.switchingIn=true;
},
onStart(pokemon){
//ImposterdoesnotactivatewhenSkillSwappedorwhenNeutralizingGasleavesthefield
if(!this.effectState.switchingIn)return;
//copiesacrossindoubles/triples
//(alsocopiesacrossinmultibattleanddiagonallyinfree-for-all,
//butside.foealreadytakescareofthose)
consttarget=pokemon.side.foe.active[pokemon.side.foe.active.length-1-pokemon.position];
if(target){
pokemon.transformInto(target,this.dex.abilities.get('imposter'));
}
this.effectState.switchingIn=false;
},
name:"Imposter",
rating:5,
num:150,
},
infiltrator:{
onModifyMove(move){
move.infiltrates=true;
},
name:"Infiltrator",
rating:2.5,
num:151,
},
innardsout:{
name:"InnardsOut",
onDamagingHitOrder:1,
onDamagingHit(damage,target,source,move){
if(!target.hp){
this.damage(target.getUndynamaxedHP(damage),source,target);
}
},
rating:4,
num:215,
},
innerfocus:{
onTryAddVolatile(status,pokemon){
if(status.id==='flinch')returnnull;
},
onTryBoost(boost,target,source,effect){
if(effect.name==='Intimidate'&&boost.atk){
deleteboost.atk;
this.add('-fail',target,'unboost','Attack','[from]ability:InnerFocus','[of]'+target);
}
},
isBreakable:true,
name:"InnerFocus",
rating:1,
num:39,
},
insomnia:{
onUpdate(pokemon){
if(pokemon.status==='slp'){
this.add('-activate',pokemon,'ability:Insomnia');
pokemon.cureStatus();
}
},
onSetStatus(status,target,source,effect){
if(status.id!=='slp')return;
if((effectasMove)?.status){
this.add('-immune',target,'[from]ability:Insomnia');
}
returnfalse;
},
isBreakable:true,
name:"Insomnia",
rating:1.5,
num:15,
},
intimidate:{
onStart(pokemon){
letactivated=false;
for(consttargetofpokemon.adjacentFoes()){
if(!activated){
this.add('-ability',pokemon,'Intimidate','boost');
activated=true;
}
if(target.volatiles['substitute']){
this.add('-immune',target);
}else{
this.boost({atk:-1},target,pokemon,null,true);
}
}
},
name:"Intimidate",
rating:3.5,
num:22,
},
intrepidsword:{
onStart(pokemon){
if(this.effectState.swordBoost)return;
if(this.boost({atk:1},pokemon)){
this.effectState.swordBoost=true;
}
},
name:"IntrepidSword",
rating:4,
num:234,
},
ironbarbs:{
onDamagingHitOrder:1,
onDamagingHit(damage,target,source,move){
if(this.checkMoveMakesContact(move,source,target,true)){
this.damage(source.baseMaxhp/8,source,target);
}
},
name:"IronBarbs",
rating:2.5,
num:160,
},
ironfist:{
onBasePowerPriority:23,
onBasePower(basePower,attacker,defender,move){
if(move.flags['punch']){
this.debug('IronFistboost');
returnthis.chainModify([4915,4096]);
}
},
name:"IronFist",
rating:3,
num:89,
},
justified:{
onDamagingHit(damage,target,source,move){
if(move.type==='Dark'){
this.boost({atk:1});
}
},
name:"Justified",
rating:2.5,
num:154,
},
keeneye:{
onTryBoost(boost,target,source,effect){
if(source&&target===source)return;
if(boost.accuracy&&boost.accuracy<0){
deleteboost.accuracy;
if(!(effectasActiveMove).secondaries){
this.add("-fail",target,"unboost","accuracy","[from]ability:KeenEye","[of]"+target);
}
}
},
onModifyMove(move){
move.ignoreEvasion=true;
},
isBreakable:true,
name:"KeenEye",
rating:0.5,
num:51,
},
klutz:{
//ItemsuppressionimplementedinPokemon.ignoringItem()withinsim/pokemon.js
onStart(pokemon){
this.singleEvent('End',pokemon.getItem(),pokemon.itemState,pokemon);
},
name:"Klutz",
rating:-1,
num:103,
},
leafguard:{
onSetStatus(status,target,source,effect){
if(['sunnyday','desolateland'].includes(target.effectiveWeather())){
if((effectasMove)?.status){
this.add('-immune',target,'[from]ability:LeafGuard');
}
returnfalse;
}
},
onTryAddVolatile(status,target){
if(status.id==='yawn'&&['sunnyday','desolateland'].includes(target.effectiveWeather())){
this.add('-immune',target,'[from]ability:LeafGuard');
returnnull;
}
},
isBreakable:true,
name:"LeafGuard",
rating:0.5,
num:102,
},
levitate:{
//airbornenessimplementedinsim/pokemon.js:Pokemon#isGrounded
isBreakable:true,
name:"Levitate",
rating:3.5,
num:26,
},
libero:{
onPrepareHit(source,target,move){
if(this.effectState.libero)return;
if(move.hasBounced||move.flags['futuremove']||move.sourceEffect==='snatch')return;
consttype=move.type;
if(type&&type!=='???'&&source.getTypes().join()!==type){
if(!source.setType(type))return;
this.effectState.libero=true;
this.add('-start',source,'typechange',type,'[from]ability:Libero');
}
},
onSwitchIn(){
deletethis.effectState.libero;
},
name:"Libero",
rating:4,
num:236,
},
lightmetal:{
onModifyWeight(weighthg){
returnthis.trunc(weighthg/2);
},
isBreakable:true,
name:"LightMetal",
rating:1,
num:135,
},
lightningrod:{
onTryHit(target,source,move){
if(target!==source&&move.type==='Electric'){
if(!this.boost({spa:1})){
this.add('-immune',target,'[from]ability:LightningRod');
}
returnnull;
}
},
onAnyRedirectTarget(target,source,source2,move){
if(move.type!=='Electric'||move.flags['pledgecombo'])return;
constredirectTarget=['randomNormal','adjacentFoe'].includes(move.target)?'normal':move.target;
if(this.validTarget(this.effectState.target,source,redirectTarget)){
if(move.smartTarget)move.smartTarget=false;
if(this.effectState.target!==target){
this.add('-activate',this.effectState.target,'ability:LightningRod');
}
returnthis.effectState.target;
}
},
isBreakable:true,
name:"LightningRod",
rating:3,
num:31,
},
limber:{
onUpdate(pokemon){
if(pokemon.status==='par'){
this.add('-activate',pokemon,'ability:Limber');
pokemon.cureStatus();
}
},
onSetStatus(status,target,source,effect){
if(status.id!=='par')return;
if((effectasMove)?.status){
this.add('-immune',target,'[from]ability:Limber');
}
returnfalse;
},
isBreakable:true,
name:"Limber",
rating:2,
num:7,
},
lingeringaroma:{
onDamagingHit(damage,target,source,move){
constsourceAbility=source.getAbility();
if(sourceAbility.isPermanent||sourceAbility.id==='lingeringaroma'){
return;
}
if(this.checkMoveMakesContact(move,source,target,!source.isAlly(target))){
constoldAbility=source.setAbility('lingeringaroma',target);
if(oldAbility){
this.add('-activate',target,'ability:LingeringAroma',this.dex.abilities.get(oldAbility).name,'[of]'+source);
}
}
},
name:"LingeringAroma",
rating:2,
num:268,
},
liquidooze:{
onSourceTryHeal(damage,target,source,effect){
this.debug("Healisoccurring:"+target+"<-"+source+"::"+effect.id);
constcanOoze=['drain','leechseed','strengthsap'];
if(canOoze.includes(effect.id)){
this.damage(damage);
return0;
}
},
name:"LiquidOoze",
rating:2.5,
num:64,
},
liquidvoice:{
onModifyTypePriority:-1,
onModifyType(move,pokemon){
if(move.flags['sound']&&!pokemon.volatiles['dynamax']){//hardcode
move.type='Water';
}
},
name:"LiquidVoice",
rating:1.5,
num:204,
},
longreach:{
onModifyMove(move){
deletemove.flags['contact'];
},
name:"LongReach",
rating:1,
num:203,
},
magicbounce:{
name:"MagicBounce",
onTryHitPriority:1,
onTryHit(target,source,move){
if(target===source||move.hasBounced||!move.flags['reflectable']){
return;
}
constnewMove=this.dex.getActiveMove(move.id);
newMove.hasBounced=true;
newMove.pranksterBoosted=false;
this.actions.useMove(newMove,target,source);
returnnull;
},
onAllyTryHitSide(target,source,move){
if(target.isAlly(source)||move.hasBounced||!move.flags['reflectable']){
return;
}
constnewMove=this.dex.getActiveMove(move.id);
newMove.hasBounced=true;
newMove.pranksterBoosted=false;
this.actions.useMove(newMove,this.effectState.target,source);
returnnull;
},
condition:{
duration:1,
},
isBreakable:true,
rating:4,
num:156,
},
magicguard:{
onDamage(damage,target,source,effect){
if(effect.effectType!=='Move'){
if(effect.effectType==='Ability')this.add('-activate',source,'ability:'+effect.name);
returnfalse;
}
},
name:"MagicGuard",
rating:4,
num:98,
},
magician:{
onAfterMoveSecondarySelf(source,target,move){
if(!move||!target)return;
if(target!==source&&move.category!=='Status'){
if(source.item||source.volatiles['gem']||move.id==='fling')return;
constyourItem=target.takeItem(source);
if(!yourItem)return;
if(!source.setItem(yourItem)){
target.item=yourItem.id;//bypasssetItemsowedon'tbreakchoicelockoranything
return;
}
this.add('-item',source,yourItem,'[from]ability:Magician','[of]'+target);
}
},
name:"Magician",
rating:1,
num:170,
},
magmaarmor:{
onUpdate(pokemon){
if(pokemon.status==='frz'){
this.add('-activate',pokemon,'ability:MagmaArmor');
pokemon.cureStatus();
}
},
onImmunity(type,pokemon){
if(type==='frz')returnfalse;
},
isBreakable:true,
name:"MagmaArmor",
rating:0.5,
num:40,
},
magnetpull:{
onFoeTrapPokemon(pokemon){
if(pokemon.hasType('Steel')&&pokemon.isAdjacent(this.effectState.target)){
pokemon.tryTrap(true);
}
},
onFoeMaybeTrapPokemon(pokemon,source){
if(!source)source=this.effectState.target;
if(!source||!pokemon.isAdjacent(source))return;
if(!pokemon.knownType||pokemon.hasType('Steel')){
pokemon.maybeTrapped=true;
}
},
name:"MagnetPull",
rating:4,
num:42,
},
marvelscale:{
onModifyDefPriority:6,
onModifyDef(def,pokemon){
if(pokemon.status){
returnthis.chainModify(1.5);
}
},
isBreakable:true,
name:"MarvelScale",
rating:2.5,
num:63,
},
megalauncher:{
onBasePowerPriority:19,
onBasePower(basePower,attacker,defender,move){
if(move.flags['pulse']){
returnthis.chainModify(1.5);
}
},
name:"MegaLauncher",
rating:3,
num:178,
},
merciless:{
onModifyCritRatio(critRatio,source,target){
if(target&&['psn','tox'].includes(target.status))return5;
},
name:"Merciless",
rating:1.5,
num:196,
},
mimicry:{
onStart(pokemon){
this.singleEvent('TerrainChange',this.effect,this.effectState,pokemon);
},
onTerrainChange(pokemon){
lettypes;
switch(this.field.terrain){
case'electricterrain':
types=['Electric'];
break;
case'grassyterrain':
types=['Grass'];
break;
case'mistyterrain':
types=['Fairy'];
break;
case'psychicterrain':
types=['Psychic'];
break;
default:
types=pokemon.baseSpecies.types;
}
constoldTypes=pokemon.getTypes();
if(oldTypes.join()===types.join()||!pokemon.setType(types))return;
if(this.field.terrain||pokemon.transformed){
this.add('-start',pokemon,'typechange',types.join('/'),'[from]ability:Mimicry');
if(!this.field.terrain)this.hint("TransformMimicrychangesyoutoyouroriginalun-transformedtypes.");
}else{
this.add('-activate',pokemon,'ability:Mimicry');
this.add('-end',pokemon,'typechange','[silent]');
}
},
name:"Mimicry",
rating:0,
num:250,
},
minus:{
onModifySpAPriority:5,
onModifySpA(spa,pokemon){
for(constallyActiveofpokemon.allies()){
if(allyActive.hasAbility(['minus','plus'])){
returnthis.chainModify(1.5);
}
}
},
name:"Minus",
rating:0,
num:58,
},
mirrorarmor:{
onTryBoost(boost,target,source,effect){
//Don'tbounceselfstatchanges,orbooststhathavealreadybounced
if(!source||target===source||!boost||effect.name==='MirrorArmor')return;
letb:BoostID;
for(binboost){
if(boost[b]!<0){
if(target.boosts[b]===-6)continue;
constnegativeBoost:SparseBoostsTable={};
negativeBoost[b]=boost[b];
deleteboost[b];
if(source.hp){
this.add('-ability',target,'MirrorArmor');
this.boost(negativeBoost,source,target,null,true);
}
}
}
},
isBreakable:true,
name:"MirrorArmor",
rating:2,
num:240,
},
mistysurge:{
onStart(source){
this.field.setTerrain('mistyterrain');
},
name:"MistySurge",
rating:3.5,
num:228,
},
moldbreaker:{
onStart(pokemon){
this.add('-ability',pokemon,'MoldBreaker');
},
onModifyMove(move){
move.ignoreAbility=true;
},
name:"MoldBreaker",
rating:3,
num:104,
},
moody:{
onResidualOrder:28,
onResidualSubOrder:2,
onResidual(pokemon){
letstats:BoostID[]=[];
constboost:SparseBoostsTable={};
letstatPlus:BoostID;
for(statPlusinpokemon.boosts){
if(statPlus==='accuracy'||statPlus==='evasion')continue;
if(pokemon.boosts[statPlus]<6){
stats.push(statPlus);
}
}
letrandomStat:BoostID|undefined=stats.length?this.sample(stats):undefined;
if(randomStat)boost[randomStat]=2;

stats=[];
letstatMinus:BoostID;
for(statMinusinpokemon.boosts){
if(statMinus==='accuracy'||statMinus==='evasion')continue;
if(pokemon.boosts[statMinus]>-6&&statMinus!==randomStat){
stats.push(statMinus);
}
}
randomStat=stats.length?this.sample(stats):undefined;
if(randomStat)boost[randomStat]=-1;

this.boost(boost,pokemon,pokemon);
},
name:"Moody",
rating:5,
num:141,
},
motordrive:{
onTryHit(target,source,move){
if(target!==source&&move.type==='Electric'){
if(!this.boost({spe:1})){
this.add('-immune',target,'[from]ability:MotorDrive');
}
returnnull;
}
},
isBreakable:true,
name:"MotorDrive",
rating:3,
num:78,
},
moxie:{
onSourceAfterFaint(length,target,source,effect){
if(effect&&effect.effectType==='Move'){
this.boost({atk:length},source);
}
},
name:"Moxie",
rating:3,
num:153,
},
multiscale:{
onSourceModifyDamage(damage,source,target,move){
if(target.hp>=target.maxhp){
this.debug('Multiscaleweaken');
returnthis.chainModify(0.5);
}
},
isBreakable:true,
name:"Multiscale",
rating:3.5,
num:136,
},
multitype:{
//Multitype'stype-changingitselfisimplementedinstatuses.js
isPermanent:true,
name:"Multitype",
rating:4,
num:121,
},
mummy:{
name:"Mummy",
onDamagingHit(damage,target,source,move){
constsourceAbility=source.getAbility();
if(sourceAbility.isPermanent||sourceAbility.id==='mummy'){
return;
}
if(this.checkMoveMakesContact(move,source,target,!source.isAlly(target))){
constoldAbility=source.setAbility('mummy',target);
if(oldAbility){
this.add('-activate',target,'ability:Mummy',this.dex.abilities.get(oldAbility).name,'[of]'+source);
}
}
},
rating:2,
num:152,
},
myceliummight:{
onFractionalPriorityPriority:-1,
onFractionalPriority(priority,pokemon,target,move){
if(move.category==='Status'){
return-0.1;
}
},
onModifyMove(move){
if(move.category==='Status'){
move.ignoreAbility=true;
}
},
name:"MyceliumMight",
rating:2,
num:298,
},
naturalcure:{
onCheckShow(pokemon){
//Thisiscomplicated
//Forthemostpart,in-game,it'sobviouswhetherornotNaturalCureactivated,
//sinceyoucanseehowmanyofyouropponent'spokemonarestatused.
//TheonlyambiguoussituationhappensinDoubles/Triples,wheremultiplepokemon
//thatcouldhaveNaturalCureswitchout,butonlysomeofthemgetcured.
if(pokemon.side.active.length===1)return;
if(pokemon.showCure===true||pokemon.showCure===false)return;

constcureList=[];
letnoCureCount=0;
for(constcurPokeofpokemon.side.active){
//pokemonnotstatused
if(!curPoke?.status){
//this.add('-message',""+curPoke+"skipped:notstatusedordoesn'texist");
continue;
}
if(curPoke.showCure){
//this.add('-message',""+curPoke+"skipped:NaturalCurealreadyknown");
continue;
}
constspecies=curPoke.species;
//pokemoncan'tgetNaturalCure
if(!Object.values(species.abilities).includes('NaturalCure')){
//this.add('-message',""+curPoke+"skipped:noNaturalCure");
continue;
}
//pokemon'sabilityisknowntobeNaturalCure
if(!species.abilities['1']&&!species.abilities['H']){
//this.add('-message',""+curPoke+"skipped:onlyoneability");
continue;
}
//pokemonisn'tswitchingthisturn
if(curPoke!==pokemon&&!this.queue.willSwitch(curPoke)){
//this.add('-message',""+curPoke+"skipped:notswitching");
continue;
}

if(curPoke.hasAbility('naturalcure')){
//this.add('-message',""+curPoke+"confirmed:couldbeNaturalCure(andis)");
cureList.push(curPoke);
}else{
//this.add('-message',""+curPoke+"confirmed:couldbeNaturalCure(butisn't)");
noCureCount++;
}
}

if(!cureList.length||!noCureCount){
//It'spossibletoknowwhatpokemonwerecured
for(constpkmnofcureList){
pkmn.showCure=true;
}
}else{
//It'snotpossibletoknowwhatpokemonwerecured

//Unlikea-hint,thisisrealinformationthatbattlersneed,soweusea-message
this.add('-message',"("+cureList.length+"of"+pokemon.side.name+"'spokemon"+(cureList.length===1?"was":"were")+"curedbyNaturalCure.)");

for(constpkmnofcureList){
pkmn.showCure=false;
}
}
},
onSwitchOut(pokemon){
if(!pokemon.status)return;

//ifpokemon.showCureisundefined,itwasskippedbecauseitsability
//isknown
if(pokemon.showCure===undefined)pokemon.showCure=true;

if(pokemon.showCure)this.add('-curestatus',pokemon,pokemon.status,'[from]ability:NaturalCure');
pokemon.clearStatus();

//onlyreset.showCureifit'sfalse
//(onceyouknowaPokemonhasNaturalCure,itscuresarealwaysknown)
if(!pokemon.showCure)pokemon.showCure=undefined;
},
name:"NaturalCure",
rating:2.5,
num:30,
},
neuroforce:{
onModifyDamage(damage,source,target,move){
if(move&&target.getMoveHitData(move).typeMod>0){
returnthis.chainModify([5120,4096]);
}
},
name:"Neuroforce",
rating:2.5,
num:233,
},
neutralizinggas:{
//Abilitysuppressionimplementedinsim/pokemon.ts:Pokemon#ignoringAbility
onPreStart(pokemon){
if(pokemon.transformed)return;
this.add('-ability',pokemon,'NeutralizingGas');
pokemon.abilityState.ending=false;
conststrongWeathers=['desolateland','primordialsea','deltastream'];
for(consttargetofthis.getAllActive()){
if(target.hasItem('AbilityShield')){
this.add('-block',target,'item:AbilityShield');
continue;
}
if(target.illusion){
this.singleEvent('End',this.dex.abilities.get('Illusion'),target.abilityState,target,pokemon,'neutralizinggas');
}
if(target.volatiles['slowstart']){
deletetarget.volatiles['slowstart'];
this.add('-end',target,'SlowStart','[silent]');
}
if(strongWeathers.includes(target.getAbility().id)){
this.singleEvent('End',this.dex.abilities.get(target.getAbility().id),target.abilityState,target,pokemon,'neutralizinggas');
}
}
},
onEnd(source){
if(source.transformed)return;
for(constpokemonofthis.getAllActive()){
if(pokemon!==source&&pokemon.hasAbility('NeutralizingGas')){
return;
}
}
this.add('-end',source,'ability:NeutralizingGas');

//FIXMEthishappensbeforethepokemonswitchesout,shouldbetheoppositeorder.
//Notaneasyfixsincewecantuseasupportedevent.Wouldneedsomekindofspecialeventthat
//gatherseventstorunaftertheswitchandthenrunsthemwhentheabilityisnolongeraccessible.
//(Ifyou'retacklingthis,donoteextremeweathershavethesameissue)

//Markthispokemon'sabilityasendingsoPokemon#ignoringAbilityskipsit
if(source.abilityState.ending)return;
source.abilityState.ending=true;
constsortedActive=this.getAllActive();
this.speedSort(sortedActive);
for(constpokemonofsortedActive){
if(pokemon!==source){
if(pokemon.getAbility().isPermanent)continue;//doesnotinteractwithe.gIceFace,ZenMode

//WillbesuppressedbyPokemon#ignoringAbilityifneeded
this.singleEvent('Start',pokemon.getAbility(),pokemon.abilityState,pokemon);
if(pokemon.ability==="gluttony"){
pokemon.abilityState.gluttony=false;
}
}
}
},
name:"NeutralizingGas",
rating:4,
num:256,
},
noguard:{
onAnyInvulnerabilityPriority:1,
onAnyInvulnerability(target,source,move){
if(move&&(source===this.effectState.target||target===this.effectState.target))return0;
},
onAnyAccuracy(accuracy,target,source,move){
if(move&&(source===this.effectState.target||target===this.effectState.target)){
returntrue;
}
returnaccuracy;
},
name:"NoGuard",
rating:4,
num:99,
},
normalize:{
onModifyTypePriority:1,
onModifyType(move,pokemon){
constnoModifyType=[
'hiddenpower','judgment','multiattack','naturalgift','revelationdance','struggle','technoblast','terrainpulse','weatherball',
];
if(!(move.isZ&&move.category!=='Status')&&!noModifyType.includes(move.id)&&
//TODO:Figureoutactualinteraction
!(move.name==='TeraBlast'&&pokemon.terastallized)){
move.type='Normal';
move.typeChangerBoosted=this.effect;
}
},
onBasePowerPriority:23,
onBasePower(basePower,pokemon,target,move){
if(move.typeChangerBoosted===this.effect)returnthis.chainModify([4915,4096]);
},
name:"Normalize",
rating:0,
num:96,
},
oblivious:{
onUpdate(pokemon){
if(pokemon.volatiles['attract']){
this.add('-activate',pokemon,'ability:Oblivious');
pokemon.removeVolatile('attract');
this.add('-end',pokemon,'move:Attract','[from]ability:Oblivious');
}
if(pokemon.volatiles['taunt']){
this.add('-activate',pokemon,'ability:Oblivious');
pokemon.removeVolatile('taunt');
//Taunt'svolatilealreadysendsthe-endmessagewhenremoved
}
},
onImmunity(type,pokemon){
if(type==='attract')returnfalse;
},
onTryHit(pokemon,target,move){
if(move.id==='attract'||move.id==='captivate'||move.id==='taunt'){
this.add('-immune',pokemon,'[from]ability:Oblivious');
returnnull;
}
},
onTryBoost(boost,target,source,effect){
if(effect.name==='Intimidate'&&boost.atk){
deleteboost.atk;
this.add('-fail',target,'unboost','Attack','[from]ability:Oblivious','[of]'+target);
}
},
isBreakable:true,
name:"Oblivious",
rating:1.5,
num:12,
},
opportunist:{
onFoeAfterBoost(boost,target,source,effect){
if(effect?.name==='Opportunist'||effect?.name==='MirrorHerb')return;
constpokemon=this.effectState.target;
constpositiveBoosts:Partial<BoostsTable>={};
leti:BoostID;
for(iinboost){
if(boost[i]!>0){
positiveBoosts[i]=boost[i];
}
}
if(Object.keys(positiveBoosts).length<1)return;
this.boost(positiveBoosts,pokemon);
},
name:"Opportunist",
rating:3,
num:290,
},
orichalcumpulse:{
onStart(pokemon){
if(this.field.setWeather('sunnyday')){
this.add('-activate',pokemon,'OrichalcumPulse','[source]');
}elseif(this.field.isWeather('sunnyday')){
this.add('-activate',pokemon,'ability:OrichalcumPulse');
}
},
onModifyAtkPriority:5,
onModifyAtk(atk,pokemon){
if(['sunnyday','desolateland'].includes(pokemon.effectiveWeather())){
this.debug('Orichalcumboost');
returnthis.chainModify([5461,4096]);
}
},
isPermanent:true,
name:"OrichalcumPulse",
rating:4.5,
num:288,
},
overcoat:{
onImmunity(type,pokemon){
if(type==='sandstorm'||type==='hail'||type==='powder')returnfalse;
},
onTryHitPriority:1,
onTryHit(target,source,move){
if(move.flags['powder']&&target!==source&&this.dex.getImmunity('powder',target)){
this.add('-immune',target,'[from]ability:Overcoat');
returnnull;
}
},
isBreakable:true,
name:"Overcoat",
rating:2,
num:142,
},
overgrow:{
onModifyAtkPriority:5,
onModifyAtk(atk,attacker,defender,move){
if(move.type==='Grass'&&attacker.hp<=attacker.maxhp/3){
this.debug('Overgrowboost');
returnthis.chainModify(1.5);
}
},
onModifySpAPriority:5,
onModifySpA(atk,attacker,defender,move){
if(move.type==='Grass'&&attacker.hp<=attacker.maxhp/3){
this.debug('Overgrowboost');
returnthis.chainModify(1.5);
}
},
name:"Overgrow",
rating:2,
num:65,
},
owntempo:{
onUpdate(pokemon){
if(pokemon.volatiles['confusion']){
this.add('-activate',pokemon,'ability:OwnTempo');
pokemon.removeVolatile('confusion');
}
},
onTryAddVolatile(status,pokemon){
if(status.id==='confusion')returnnull;
},
onHit(target,source,move){
if(move?.volatileStatus==='confusion'){
this.add('-immune',target,'confusion','[from]ability:OwnTempo');
}
},
onTryBoost(boost,target,source,effect){
if(effect.name==='Intimidate'&&boost.atk){
deleteboost.atk;
this.add('-fail',target,'unboost','Attack','[from]ability:OwnTempo','[of]'+target);
}
},
isBreakable:true,
name:"OwnTempo",
rating:1.5,
num:20,
},
parentalbond:{
onPrepareHit(source,target,move){
if(move.category==='Status'||move.multihit||move.flags['noparentalbond']||move.flags['charge']||
move.flags['futuremove']||move.spreadHit||move.isZ||move.isMax)return;
move.multihit=2;
move.multihitType='parentalbond';
},
//DamagemodifierimplementedinBattleActions#modifyDamage()
onSourceModifySecondaries(secondaries,target,source,move){
if(move.multihitType==='parentalbond'&&move.id==='secretpower'&&move.hit<2){
//hacktopreventaccidentallysuppressingKing'sRock/RazorFang
returnsecondaries.filter(effect=>effect.volatileStatus==='flinch');
}
},
name:"ParentalBond",
rating:4.5,
num:185,
},
pastelveil:{
onStart(pokemon){
for(constallyofpokemon.alliesAndSelf()){
if(['psn','tox'].includes(ally.status)){
this.add('-activate',pokemon,'ability:PastelVeil');
ally.cureStatus();
}
}
},
onUpdate(pokemon){
if(['psn','tox'].includes(pokemon.status)){
this.add('-activate',pokemon,'ability:PastelVeil');
pokemon.cureStatus();
}
},
onAllySwitchIn(pokemon){
if(['psn','tox'].includes(pokemon.status)){
this.add('-activate',this.effectState.target,'ability:PastelVeil');
pokemon.cureStatus();
}
},
onSetStatus(status,target,source,effect){
if(!['psn','tox'].includes(status.id))return;
if((effectasMove)?.status){
this.add('-immune',target,'[from]ability:PastelVeil');
}
returnfalse;
},
onAllySetStatus(status,target,source,effect){
if(!['psn','tox'].includes(status.id))return;
if((effectasMove)?.status){
consteffectHolder=this.effectState.target;
this.add('-block',target,'ability:PastelVeil','[of]'+effectHolder);
}
returnfalse;
},
isBreakable:true,
name:"PastelVeil",
rating:2,
num:257,
},
perishbody:{
onDamagingHit(damage,target,source,move){
if(!this.checkMoveMakesContact(move,source,target))return;

letannounced=false;
for(constpokemonof[target,source]){
if(pokemon.volatiles['perishsong'])continue;
if(!announced){
this.add('-ability',target,'PerishBody');
announced=true;
}
pokemon.addVolatile('perishsong');
}
},
name:"PerishBody",
rating:1,
num:253,
},
pickpocket:{
onAfterMoveSecondary(target,source,move){
if(source&&source!==target&&move?.flags['contact']){
if(target.item||target.switchFlag||target.forceSwitchFlag||source.switchFlag===true){
return;
}
constyourItem=source.takeItem(target);
if(!yourItem){
return;
}
if(!target.setItem(yourItem)){
source.item=yourItem.id;
return;
}
this.add('-enditem',source,yourItem,'[silent]','[from]ability:Pickpocket','[of]'+source);
this.add('-item',target,yourItem,'[from]ability:Pickpocket','[of]'+source);
}
},
name:"Pickpocket",
rating:1,
num:124,
},
pickup:{
onResidualOrder:28,
onResidualSubOrder:2,
onResidual(pokemon){
if(pokemon.item)return;
constpickupTargets=this.getAllActive().filter(target=>(
target.lastItem&&target.usedItemThisTurn&&pokemon.isAdjacent(target)
));
if(!pickupTargets.length)return;
constrandomTarget=this.sample(pickupTargets);
constitem=randomTarget.lastItem;
randomTarget.lastItem='';
this.add('-item',pokemon,this.dex.items.get(item),'[from]ability:Pickup');
pokemon.setItem(item);
},
name:"Pickup",
rating:0.5,
num:53,
},
pixilate:{
onModifyTypePriority:-1,
onModifyType(move,pokemon){
constnoModifyType=[
'judgment','multiattack','naturalgift','revelationdance','technoblast','terrainpulse','weatherball',
];
if(move.type==='Normal'&&!noModifyType.includes(move.id)&&
!(move.isZ&&move.category!=='Status')&&!(move.name==='TeraBlast'&&pokemon.terastallized)){
move.type='Fairy';
move.typeChangerBoosted=this.effect;
}
},
onBasePowerPriority:23,
onBasePower(basePower,pokemon,target,move){
if(move.typeChangerBoosted===this.effect)returnthis.chainModify([4915,4096]);
},
name:"Pixilate",
rating:4,
num:182,
},
plus:{
onModifySpAPriority:5,
onModifySpA(spa,pokemon){
for(constallyActiveofpokemon.allies()){
if(allyActive.hasAbility(['minus','plus'])){
returnthis.chainModify(1.5);
}
}
},
name:"Plus",
rating:0,
num:57,
},
poisonheal:{
onDamagePriority:1,
onDamage(damage,target,source,effect){
if(effect.id==='psn'||effect.id==='tox'){
this.heal(target.baseMaxhp/8);
returnfalse;
}
},
name:"PoisonHeal",
rating:4,
num:90,
},
poisonpoint:{
onDamagingHit(damage,target,source,move){
if(this.checkMoveMakesContact(move,source,target)){
if(this.randomChance(3,10)){
source.trySetStatus('psn',target);
}
}
},
name:"PoisonPoint",
rating:1.5,
num:38,
},
poisontouch:{
//upokecentersaysthisisimplementedasanaddedsecondaryeffect
onModifyMove(move){
if(!move?.flags['contact']||move.target==='self')return;
if(!move.secondaries){
move.secondaries=[];
}
move.secondaries.push({
chance:30,
status:'psn',
ability:this.dex.abilities.get('poisontouch'),
});
},
name:"PoisonTouch",
rating:2,
num:143,
},
powerconstruct:{
onResidualOrder:29,
onResidual(pokemon){
if(pokemon.baseSpecies.baseSpecies!=='Zygarde'||pokemon.transformed||!pokemon.hp)return;
if(pokemon.species.id==='zygardecomplete'||pokemon.hp>pokemon.maxhp/2)return;
this.add('-activate',pokemon,'ability:PowerConstruct');
pokemon.formeChange('Zygarde-Complete',this.effect,true);
pokemon.baseMaxhp=Math.floor(Math.floor(
2*pokemon.species.baseStats['hp']+pokemon.set.ivs['hp']+Math.floor(pokemon.set.evs['hp']/4)+100
)*pokemon.level/100+10);
constnewMaxHP=pokemon.volatiles['dynamax']?(2*pokemon.baseMaxhp):pokemon.baseMaxhp;
pokemon.hp=newMaxHP-(pokemon.maxhp-pokemon.hp);
pokemon.maxhp=newMaxHP;
this.add('-heal',pokemon,pokemon.getHealth,'[silent]');
},
isPermanent:true,
name:"PowerConstruct",
rating:5,
num:211,
},
powerofalchemy:{
onAllyFaint(target){
if(!this.effectState.target.hp)return;
constability=target.getAbility();
constadditionalBannedAbilities=[
'noability','flowergift','forecast','hungerswitch','illusion','imposter','neutralizinggas','powerofalchemy','receiver','trace','wonderguard',
];
if(target.getAbility().isPermanent||additionalBannedAbilities.includes(target.ability))return;
if(this.effectState.target.setAbility(ability)){
this.add('-ability',this.effectState.target,ability,'[from]ability:PowerofAlchemy','[of]'+target);
}
},
name:"PowerofAlchemy",
rating:0,
num:223,
},
powerspot:{
onAllyBasePowerPriority:22,
onAllyBasePower(basePower,attacker,defender,move){
if(attacker!==this.effectState.target){
this.debug('PowerSpotboost');
returnthis.chainModify([5325,4096]);
}
},
name:"PowerSpot",
rating:0,
num:249,
},
prankster:{
onModifyPriority(priority,pokemon,target,move){
if(move?.category==='Status'){
move.pranksterBoosted=true;
returnpriority+1;
}
},
name:"Prankster",
rating:4,
num:158,
},
pressure:{
onStart(pokemon){
this.add('-ability',pokemon,'Pressure');
},
onDeductPP(target,source){
if(target.isAlly(source))return;
return1;
},
name:"Pressure",
rating:2.5,
num:46,
},
primordialsea:{
onStart(source){
this.field.setWeather('primordialsea');
},
onAnySetWeather(target,source,weather){
conststrongWeathers=['desolateland','primordialsea','deltastream'];
if(this.field.getWeather().id==='primordialsea'&&!strongWeathers.includes(weather.id))returnfalse;
},
onEnd(pokemon){
if(this.field.weatherState.source!==pokemon)return;
for(consttargetofthis.getAllActive()){
if(target===pokemon)continue;
if(target.hasAbility('primordialsea')){
this.field.weatherState.source=target;
return;
}
}
this.field.clearWeather();
},
name:"PrimordialSea",
rating:4.5,
num:189,
},
prismarmor:{
onSourceModifyDamage(damage,source,target,move){
if(target.getMoveHitData(move).typeMod>0){
this.debug('PrismArmorneutralize');
returnthis.chainModify(0.75);
}
},
name:"PrismArmor",
rating:3,
num:232,
},
propellertail:{
onModifyMovePriority:1,
onModifyMove(move){
//mostoftheimplementationisinBattle#getTarget
move.tracksTarget=move.target!=='scripted';
},
name:"PropellerTail",
rating:0,
num:239,
},
protean:{
onPrepareHit(source,target,move){
if(this.effectState.protean)return;
if(move.hasBounced||move.flags['futuremove']||move.sourceEffect==='snatch')return;
consttype=move.type;
if(type&&type!=='???'&&source.getTypes().join()!==type){
if(!source.setType(type))return;
this.effectState.protean=true;
this.add('-start',source,'typechange',type,'[from]ability:Protean');
}
},
onSwitchIn(pokemon){
deletethis.effectState.protean;
},
name:"Protean",
rating:4,
num:168,
},
protosynthesis:{
onStart(pokemon){
this.singleEvent('WeatherChange',this.effect,this.effectState,pokemon);
},
onWeatherChange(pokemon){
if(pokemon.transformed)return;
//ProtosynthesisisnotaffectedbyUtilityUmbrella
if(this.field.isWeather('sunnyday')){
pokemon.addVolatile('protosynthesis');
}elseif(!pokemon.volatiles['protosynthesis']?.fromBooster){
pokemon.removeVolatile('protosynthesis');
}
},
onEnd(pokemon){
deletepokemon.volatiles['protosynthesis'];
this.add('-end',pokemon,'Protosynthesis','[silent]');
},
condition:{
noCopy:true,
onStart(pokemon,source,effect){
if(effect?.id==='boosterenergy'){
this.effectState.fromBooster=true;
this.add('-activate',pokemon,'ability:Protosynthesis','[fromitem]');
}else{
this.add('-activate',pokemon,'ability:Protosynthesis');
}
this.effectState.bestStat=pokemon.getBestStat(false,true);
this.add('-start',pokemon,'protosynthesis'+this.effectState.bestStat);
},
onModifyAtkPriority:5,
onModifyAtk(atk,source,target,move){
if(this.effectState.bestStat!=='atk')return;
this.debug('Protosynthesisatkboost');
returnthis.chainModify([5325,4096]);
},
onModifyDefPriority:6,
onModifyDef(def,target,source,move){
if(this.effectState.bestStat!=='def')return;
this.debug('Protosynthesisdefboost');
returnthis.chainModify([5325,4096]);
},
onModifySpAPriority:5,
onModifySpA(relayVar,source,target,move){
if(this.effectState.bestStat!=='spa')return;
this.debug('Protosynthesisspaboost');
returnthis.chainModify([5325,4096]);
},
onModifySpDPriority:6,
onModifySpD(relayVar,target,source,move){
if(this.effectState.bestStat!=='spd')return;
this.debug('Protosynthesisspdboost');
returnthis.chainModify([5325,4096]);
},
onModifySpe(spe,pokemon){
if(this.effectState.bestStat!=='spe')return;
this.debug('Protosynthesisspeboost');
returnthis.chainModify(1.5);
},
onEnd(pokemon){
this.add('-end',pokemon,'Protosynthesis');
},
},
isPermanent:true,
name:"Protosynthesis",
rating:3,
num:281,
},
psychicsurge:{
onStart(source){
this.field.setTerrain('psychicterrain');
},
name:"PsychicSurge",
rating:4,
num:227,
},
punkrock:{
onBasePowerPriority:7,
onBasePower(basePower,attacker,defender,move){
if(move.flags['sound']){
this.debug('PunkRockboost');
returnthis.chainModify([5325,4096]);
}
},
onSourceModifyDamage(damage,source,target,move){
if(move.flags['sound']){
this.debug('PunkRockweaken');
returnthis.chainModify(0.5);
}
},
isBreakable:true,
name:"PunkRock",
rating:3.5,
num:244,
},
purepower:{
onModifyAtkPriority:5,
onModifyAtk(atk){
returnthis.chainModify(2);
},
name:"PurePower",
rating:5,
num:74,
},
purifyingsalt:{
onSetStatus(status,target,source,effect){
if((effectasMove)?.status){
this.add('-immune',target,'[from]ability:PurifyingSalt');
}
returnfalse;
},
onTryAddVolatile(status,target){
if(status.id==='yawn'){
this.add('-immune',target,'[from]ability:PurifyingSalt');
returnnull;
}
},
onSourceModifyAtkPriority:6,
onSourceModifyAtk(atk,attacker,defender,move){
if(move.type==='Ghost'){
this.debug('PurifyingSaltweaken');
returnthis.chainModify(0.5);
}
},
onSourceModifySpAPriority:5,
onSourceModifySpA(spa,attacker,defender,move){
if(move.type==='Ghost'){
this.debug('PurifyingSaltweaken');
returnthis.chainModify(0.5);
}
},
isBreakable:true,
name:"PurifyingSalt",
rating:4,
num:272,
},
quarkdrive:{
onStart(pokemon){
this.singleEvent('TerrainChange',this.effect,this.effectState,pokemon);
},
onTerrainChange(pokemon){
if(pokemon.transformed)return;
if(this.field.isTerrain('electricterrain')){
pokemon.addVolatile('quarkdrive');
}elseif(!pokemon.volatiles['quarkdrive']?.fromBooster){
pokemon.removeVolatile('quarkdrive');
}
},
onEnd(pokemon){
deletepokemon.volatiles['quarkdrive'];
this.add('-end',pokemon,'QuarkDrive','[silent]');
},
condition:{
noCopy:true,
onStart(pokemon,source,effect){
if(effect?.id==='boosterenergy'){
this.effectState.fromBooster=true;
this.add('-activate',pokemon,'ability:QuarkDrive','[fromitem]');
}else{
this.add('-activate',pokemon,'ability:QuarkDrive');
}
this.effectState.bestStat=pokemon.getBestStat(false,true);
this.add('-start',pokemon,'quarkdrive'+this.effectState.bestStat);
},
onModifyAtkPriority:5,
onModifyAtk(atk,source,target,move){
if(this.effectState.bestStat!=='atk')return;
this.debug('QuarkDriveatkboost');
returnthis.chainModify([5325,4096]);
},
onModifyDefPriority:6,
onModifyDef(def,target,source,move){
if(this.effectState.bestStat!=='def')return;
this.debug('QuarkDrivedefboost');
returnthis.chainModify([5325,4096]);
},
onModifySpAPriority:5,
onModifySpA(relayVar,source,target,move){
if(this.effectState.bestStat!=='spa')return;
this.debug('QuarkDrivespaboost');
returnthis.chainModify([5325,4096]);
},
onModifySpDPriority:6,
onModifySpD(relayVar,target,source,move){
if(this.effectState.bestStat!=='spd')return;
this.debug('QuarkDrivespdboost');
returnthis.chainModify([5325,4096]);
},
onModifySpe(spe,pokemon){
if(this.effectState.bestStat!=='spe')return;
this.debug('QuarkDrivespeboost');
returnthis.chainModify(1.5);
},
onEnd(pokemon){
this.add('-end',pokemon,'QuarkDrive');
},
},
isPermanent:true,
name:"QuarkDrive",
rating:3,
num:282,
},
queenlymajesty:{
onFoeTryMove(target,source,move){
consttargetAllExceptions=['perishsong','flowershield','rototiller'];
if(move.target==='foeSide'||(move.target==='all'&&!targetAllExceptions.includes(move.id))){
return;
}

constdazzlingHolder=this.effectState.target;
if((source.isAlly(dazzlingHolder)||move.target==='all')&&move.priority>0.1){
this.attrLastMove('[still]');
this.add('cant',dazzlingHolder,'ability:QueenlyMajesty',move,'[of]'+target);
returnfalse;
}
},
isBreakable:true,
name:"QueenlyMajesty",
rating:2.5,
num:214,
},
quickdraw:{
onFractionalPriorityPriority:-1,
onFractionalPriority(priority,pokemon,target,move){
if(move.category!=="Status"&&this.randomChance(3,10)){
this.add('-activate',pokemon,'ability:QuickDraw');
return0.1;
}
},
name:"QuickDraw",
rating:2.5,
num:259,
},
quickfeet:{
onModifySpe(spe,pokemon){
if(pokemon.status){
returnthis.chainModify(1.5);
}
},
name:"QuickFeet",
rating:2.5,
num:95,
},
raindish:{
onWeather(target,source,effect){
if(target.hasItem('utilityumbrella'))return;
if(effect.id==='raindance'||effect.id==='primordialsea'){
this.heal(target.baseMaxhp/16);
}
},
name:"RainDish",
rating:1.5,
num:44,
},
rattled:{
onDamagingHit(damage,target,source,move){
if(['Dark','Bug','Ghost'].includes(move.type)){
this.boost({spe:1});
}
},
onAfterBoost(boost,target,source,effect){
if(effect?.name==='Intimidate'){
this.boost({spe:1});
}
},
name:"Rattled",
rating:1,
num:155,
},
receiver:{
onAllyFaint(target){
if(!this.effectState.target.hp)return;
constability=target.getAbility();
constadditionalBannedAbilities=[
'noability','flowergift','forecast','hungerswitch','illusion','imposter','neutralizinggas','powerofalchemy','receiver','trace','wonderguard',
];
if(target.getAbility().isPermanent||additionalBannedAbilities.includes(target.ability))return;
if(this.effectState.target.setAbility(ability)){
this.add('-ability',this.effectState.target,ability,'[from]ability:Receiver','[of]'+target);
}
},
name:"Receiver",
rating:0,
num:222,
},
reckless:{
onBasePowerPriority:23,
onBasePower(basePower,attacker,defender,move){
if(move.recoil||move.hasCrashDamage){
this.debug('Recklessboost');
returnthis.chainModify([4915,4096]);
}
},
name:"Reckless",
rating:3,
num:120,
},
refrigerate:{
onModifyTypePriority:-1,
onModifyType(move,pokemon){
constnoModifyType=[
'judgment','multiattack','naturalgift','revelationdance','technoblast','terrainpulse','weatherball',
];
if(move.type==='Normal'&&!noModifyType.includes(move.id)&&
!(move.isZ&&move.category!=='Status')&&!(move.name==='TeraBlast'&&pokemon.terastallized)){
move.type='Ice';
move.typeChangerBoosted=this.effect;
}
},
onBasePowerPriority:23,
onBasePower(basePower,pokemon,target,move){
if(move.typeChangerBoosted===this.effect)returnthis.chainModify([4915,4096]);
},
name:"Refrigerate",
rating:4,
num:174,
},
regenerator:{
onSwitchOut(pokemon){
pokemon.heal(pokemon.baseMaxhp/3);
},
name:"Regenerator",
rating:4.5,
num:144,
},
ripen:{
onTryHeal(damage,target,source,effect){
if(!effect)return;
if(effect.name==='BerryJuice'||effect.name==='Leftovers'){
this.add('-activate',target,'ability:Ripen');
}
if((effectasItem).isBerry)returnthis.chainModify(2);
},
onChangeBoost(boost,target,source,effect){
if(effect&&(effectasItem).isBerry){
letb:BoostID;
for(binboost){
boost[b]!*=2;
}
}
},
onSourceModifyDamagePriority:-1,
onSourceModifyDamage(damage,source,target,move){
if(target.abilityState.berryWeaken){
target.abilityState.berryWeaken=false;
returnthis.chainModify(0.5);
}
},
onTryEatItemPriority:-1,
onTryEatItem(item,pokemon){
this.add('-activate',pokemon,'ability:Ripen');
},
onEatItem(item,pokemon){
constweakenBerries=[
'BabiriBerry','ChartiBerry','ChilanBerry','ChopleBerry','CobaBerry','ColburBerry','HabanBerry','KasibBerry','KebiaBerry','OccaBerry','PasshoBerry','PayapaBerry','RindoBerry','RoseliBerry','ShucaBerry','TangaBerry','WacanBerry','YacheBerry',
];
//Recordifthepokemonateaberrytoresisttheattack
pokemon.abilityState.berryWeaken=weakenBerries.includes(item.name);
},
name:"Ripen",
rating:2,
num:247,
},
rivalry:{
onBasePowerPriority:24,
onBasePower(basePower,attacker,defender,move){
if(attacker.gender&&defender.gender){
if(attacker.gender===defender.gender){
this.debug('Rivalryboost');
returnthis.chainModify(1.25);
}else{
this.debug('Rivalryweaken');
returnthis.chainModify(0.75);
}
}
},
name:"Rivalry",
rating:0,
num:79,
},
rkssystem:{
//RKSSystem'stype-changingitselfisimplementedinstatuses.js
isPermanent:true,
name:"RKSSystem",
rating:4,
num:225,
},
rockhead:{
onDamage(damage,target,source,effect){
if(effect.id==='recoil'){
if(!this.activeMove)thrownewError("Battle.activeMoveisnull");
if(this.activeMove.id!=='struggle')returnnull;
}
},
name:"RockHead",
rating:3,
num:69,
},
rockypayload:{
onModifyAtkPriority:5,
onModifyAtk(atk,attacker,defender,move){
if(move.type==='Rock'){
this.debug('RockyPayloadboost');
returnthis.chainModify(1.5);
}
},
onModifySpAPriority:5,
onModifySpA(atk,attacker,defender,move){
if(move.type==='Rock'){
this.debug('RockyPayloadboost');
returnthis.chainModify(1.5);
}
},
name:"RockyPayload",
rating:3.5,
num:276,
},
roughskin:{
onDamagingHitOrder:1,
onDamagingHit(damage,target,source,move){
if(this.checkMoveMakesContact(move,source,target,true)){
this.damage(source.baseMaxhp/8,source,target);
}
},
name:"RoughSkin",
rating:2.5,
num:24,
},
runaway:{
name:"RunAway",
rating:0,
num:50,
},
sandforce:{
onBasePowerPriority:21,
onBasePower(basePower,attacker,defender,move){
if(this.field.isWeather('sandstorm')){
if(move.type==='Rock'||move.type==='Ground'||move.type==='Steel'){
this.debug('SandForceboost');
returnthis.chainModify([5325,4096]);
}
}
},
onImmunity(type,pokemon){
if(type==='sandstorm')returnfalse;
},
name:"SandForce",
rating:2,
num:159,
},
sandrush:{
onModifySpe(spe,pokemon){
if(this.field.isWeather('sandstorm')){
returnthis.chainModify(2);
}
},
onImmunity(type,pokemon){
if(type==='sandstorm')returnfalse;
},
name:"SandRush",
rating:3,
num:146,
},
sandspit:{
onDamagingHit(damage,target,source,move){
this.field.setWeather('sandstorm');
},
name:"SandSpit",
rating:1,
num:245,
},
sandstream:{
onStart(source){
this.field.setWeather('sandstorm');
},
name:"SandStream",
rating:4,
num:45,
},
sandveil:{
onImmunity(type,pokemon){
if(type==='sandstorm')returnfalse;
},
onModifyAccuracyPriority:-1,
onModifyAccuracy(accuracy){
if(typeofaccuracy!=='number')return;
if(this.field.isWeather('sandstorm')){
this.debug('SandVeil-decreasingaccuracy');
returnthis.chainModify([3277,4096]);
}
},
isBreakable:true,
name:"SandVeil",
rating:1.5,
num:8,
},
sapsipper:{
onTryHitPriority:1,
onTryHit(target,source,move){
if(target!==source&&move.type==='Grass'){
if(!this.boost({atk:1})){
this.add('-immune',target,'[from]ability:SapSipper');
}
returnnull;
}
},
onAllyTryHitSide(target,source,move){
if(source===this.effectState.target||!target.isAlly(source))return;
if(move.type==='Grass'){
this.boost({atk:1},this.effectState.target);
}
},
isBreakable:true,
name:"SapSipper",
rating:3,
num:157,
},
schooling:{
onStart(pokemon){
if(pokemon.baseSpecies.baseSpecies!=='Wishiwashi'||pokemon.level<20||pokemon.transformed)return;
if(pokemon.hp>pokemon.maxhp/4){
if(pokemon.species.id==='wishiwashi'){
pokemon.formeChange('Wishiwashi-School');
}
}else{
if(pokemon.species.id==='wishiwashischool'){
pokemon.formeChange('Wishiwashi');
}
}
},
onResidualOrder:29,
onResidual(pokemon){
if(
pokemon.baseSpecies.baseSpecies!=='Wishiwashi'||pokemon.level<20||
pokemon.transformed||!pokemon.hp
)return;
if(pokemon.hp>pokemon.maxhp/4){
if(pokemon.species.id==='wishiwashi'){
pokemon.formeChange('Wishiwashi-School');
}
}else{
if(pokemon.species.id==='wishiwashischool'){
pokemon.formeChange('Wishiwashi');
}
}
},
isPermanent:true,
name:"Schooling",
rating:3,
num:208,
},
scrappy:{
onModifyMovePriority:-5,
onModifyMove(move){
if(!move.ignoreImmunity)move.ignoreImmunity={};
if(move.ignoreImmunity!==true){
move.ignoreImmunity['Fighting']=true;
move.ignoreImmunity['Normal']=true;
}
},
onTryBoost(boost,target,source,effect){
if(effect.name==='Intimidate'&&boost.atk){
deleteboost.atk;
this.add('-fail',target,'unboost','Attack','[from]ability:Scrappy','[of]'+target);
}
},
name:"Scrappy",
rating:3,
num:113,
},
screencleaner:{
onStart(pokemon){
letactivated=false;
for(constsideConditionof['reflect','lightscreen','auroraveil']){
for(constsideof[pokemon.side,...pokemon.side.foeSidesWithConditions()]){
if(side.getSideCondition(sideCondition)){
if(!activated){
this.add('-activate',pokemon,'ability:ScreenCleaner');
activated=true;
}
side.removeSideCondition(sideCondition);
}
}
}
},
name:"ScreenCleaner",
rating:2,
num:251,
},
seedsower:{
onDamagingHit(damage,target,source,move){
this.field.setTerrain('grassyterrain');
},
name:"SeedSower",
rating:2.5,
num:269,
},
serenegrace:{
onModifyMovePriority:-2,
onModifyMove(move){
if(move.secondaries){
this.debug('doublingsecondarychance');
for(constsecondaryofmove.secondaries){
if(secondary.chance)secondary.chance*=2;
}
}
if(move.self?.chance)move.self.chance*=2;
},
name:"SereneGrace",
rating:3.5,
num:32,
},
shadowshield:{
onSourceModifyDamage(damage,source,target,move){
if(target.hp>=target.maxhp){
this.debug('ShadowShieldweaken');
returnthis.chainModify(0.5);
}
},
name:"ShadowShield",
rating:3.5,
num:231,
},
shadowtag:{
onFoeTrapPokemon(pokemon){
if(!pokemon.hasAbility('shadowtag')&&pokemon.isAdjacent(this.effectState.target)){
pokemon.tryTrap(true);
}
},
onFoeMaybeTrapPokemon(pokemon,source){
if(!source)source=this.effectState.target;
if(!source||!pokemon.isAdjacent(source))return;
if(!pokemon.hasAbility('shadowtag')){
pokemon.maybeTrapped=true;
}
},
name:"ShadowTag",
rating:5,
num:23,
},
sharpness:{
onBasePowerPriority:19,
onBasePower(basePower,attacker,defender,move){
if(move.flags['slicing']){
this.debug('Shapnessboost');
returnthis.chainModify(1.5);
}
},
name:"Sharpness",
rating:3.5,
num:292,
},
shedskin:{
onResidualOrder:5,
onResidualSubOrder:3,
onResidual(pokemon){
if(pokemon.hp&&pokemon.status&&this.randomChance(33,100)){
this.debug('shedskin');
this.add('-activate',pokemon,'ability:ShedSkin');
pokemon.cureStatus();
}
},
name:"ShedSkin",
rating:3,
num:61,
},
sheerforce:{
onModifyMove(move,pokemon){
if(move.secondaries){
deletemove.secondaries;
//Technicallynotasecondaryeffect,butitisnegated
deletemove.self;
if(move.id==='clangoroussoulblaze')deletemove.selfBoost;
//Actualnegationof`AfterMoveSecondary`effectsimplementedinscripts.js
move.hasSheerForce=true;
}
},
onBasePowerPriority:21,
onBasePower(basePower,pokemon,target,move){
if(move.hasSheerForce)returnthis.chainModify([5325,4096]);
},
name:"SheerForce",
rating:3.5,
num:125,
},
shellarmor:{
onCriticalHit:false,
isBreakable:true,
name:"ShellArmor",
rating:1,
num:75,
},
shielddust:{
onModifySecondaries(secondaries){
this.debug('ShieldDustpreventsecondary');
returnsecondaries.filter(effect=>!!(effect.self||effect.dustproof));
},
isBreakable:true,
name:"ShieldDust",
rating:2,
num:19,
},
shieldsdown:{
onStart(pokemon){
if(pokemon.baseSpecies.baseSpecies!=='Minior'||pokemon.transformed)return;
if(pokemon.hp>pokemon.maxhp/2){
if(pokemon.species.forme!=='Meteor'){
pokemon.formeChange('Minior-Meteor');
}
}else{
if(pokemon.species.forme==='Meteor'){
pokemon.formeChange(pokemon.set.species);
}
}
},
onResidualOrder:29,
onResidual(pokemon){
if(pokemon.baseSpecies.baseSpecies!=='Minior'||pokemon.transformed||!pokemon.hp)return;
if(pokemon.hp>pokemon.maxhp/2){
if(pokemon.species.forme!=='Meteor'){
pokemon.formeChange('Minior-Meteor');
}
}else{
if(pokemon.species.forme==='Meteor'){
pokemon.formeChange(pokemon.set.species);
}
}
},
onSetStatus(status,target,source,effect){
if(target.species.id!=='miniormeteor'||target.transformed)return;
if((effectasMove)?.status){
this.add('-immune',target,'[from]ability:ShieldsDown');
}
returnfalse;
},
onTryAddVolatile(status,target){
if(target.species.id!=='miniormeteor'||target.transformed)return;
if(status.id!=='yawn')return;
this.add('-immune',target,'[from]ability:ShieldsDown');
returnnull;
},
isPermanent:true,
name:"ShieldsDown",
rating:3,
num:197,
},
simple:{
onChangeBoost(boost,target,source,effect){
if(effect&&effect.id==='zpower')return;
leti:BoostID;
for(iinboost){
boost[i]!*=2;
}
},
isBreakable:true,
name:"Simple",
rating:4,
num:86,
},
skilllink:{
onModifyMove(move){
if(move.multihit&&Array.isArray(move.multihit)&&move.multihit.length){
move.multihit=move.multihit[1];
}
if(move.multiaccuracy){
deletemove.multiaccuracy;
}
},
name:"SkillLink",
rating:3,
num:92,
},
slowstart:{
onStart(pokemon){
pokemon.addVolatile('slowstart');
},
onEnd(pokemon){
deletepokemon.volatiles['slowstart'];
this.add('-end',pokemon,'SlowStart','[silent]');
},
condition:{
duration:5,
onResidualOrder:28,
onResidualSubOrder:2,
onStart(target){
this.add('-start',target,'ability:SlowStart');
},
onModifyAtkPriority:5,
onModifyAtk(atk,pokemon){
returnthis.chainModify(0.5);
},
onModifySpe(spe,pokemon){
returnthis.chainModify(0.5);
},
onEnd(target){
this.add('-end',target,'SlowStart');
},
},
name:"SlowStart",
rating:-1,
num:112,
},
slushrush:{
onModifySpe(spe,pokemon){
if(this.field.isWeather(['hail','snow'])){
returnthis.chainModify(2);
}
},
name:"SlushRush",
rating:3,
num:202,
},
sniper:{
onModifyDamage(damage,source,target,move){
if(target.getMoveHitData(move).crit){
this.debug('Sniperboost');
returnthis.chainModify(1.5);
}
},
name:"Sniper",
rating:2,
num:97,
},
snowcloak:{
onImmunity(type,pokemon){
if(type==='hail')returnfalse;
},
onModifyAccuracyPriority:-1,
onModifyAccuracy(accuracy){
if(typeofaccuracy!=='number')return;
if(this.field.isWeather(['hail','snow'])){
this.debug('SnowCloak-decreasingaccuracy');
returnthis.chainModify([3277,4096]);
}
},
isBreakable:true,
name:"SnowCloak",
rating:1.5,
num:81,
},
snowwarning:{
onStart(source){
this.field.setWeather('snow');
},
name:"SnowWarning",
rating:4,
num:117,
},
solarpower:{
onModifySpAPriority:5,
onModifySpA(spa,pokemon){
if(['sunnyday','desolateland'].includes(pokemon.effectiveWeather())){
returnthis.chainModify(1.5);
}
},
onWeather(target,source,effect){
if(target.hasItem('utilityumbrella'))return;
if(effect.id==='sunnyday'||effect.id==='desolateland'){
this.damage(target.baseMaxhp/8,target,target);
}
},
name:"SolarPower",
rating:2,
num:94,
},
solidrock:{
onSourceModifyDamage(damage,source,target,move){
if(target.getMoveHitData(move).typeMod>0){
this.debug('SolidRockneutralize');
returnthis.chainModify(0.75);
}
},
isBreakable:true,
name:"SolidRock",
rating:3,
num:116,
},
soulheart:{
onAnyFaintPriority:1,
onAnyFaint(){
this.boost({spa:1},this.effectState.target);
},
name:"Soul-Heart",
rating:3.5,
num:220,
},
soundproof:{
onTryHit(target,source,move){
if(target!==source&&move.flags['sound']){
this.add('-immune',target,'[from]ability:Soundproof');
returnnull;
}
},
onAllyTryHitSide(target,source,move){
if(move.flags['sound']){
this.add('-immune',this.effectState.target,'[from]ability:Soundproof');
}
},
isBreakable:true,
name:"Soundproof",
rating:2,
num:43,
},
speedboost:{
onResidualOrder:28,
onResidualSubOrder:2,
onResidual(pokemon){
if(pokemon.activeTurns){
this.boost({spe:1});
}
},
name:"SpeedBoost",
rating:4.5,
num:3,
},
stakeout:{
onModifyAtkPriority:5,
onModifyAtk(atk,attacker,defender){
if(!defender.activeTurns){
this.debug('Stakeoutboost');
returnthis.chainModify(2);
}
},
onModifySpAPriority:5,
onModifySpA(atk,attacker,defender){
if(!defender.activeTurns){
this.debug('Stakeoutboost');
returnthis.chainModify(2);
}
},
name:"Stakeout",
rating:4.5,
num:198,
},
stall:{
onFractionalPriority:-0.1,
name:"Stall",
rating:-1,
num:100,
},
stalwart:{
onModifyMovePriority:1,
onModifyMove(move){
//mostoftheimplementationisinBattle#getTarget
move.tracksTarget=move.target!=='scripted';
},
name:"Stalwart",
rating:0,
num:242,
},
stamina:{
onDamagingHit(damage,target,source,effect){
this.boost({def:1});
},
name:"Stamina",
rating:3.5,
num:192,
},
stancechange:{
onModifyMovePriority:1,
onModifyMove(move,attacker,defender){
if(attacker.species.baseSpecies!=='Aegislash'||attacker.transformed)return;
if(move.category==='Status'&&move.id!=='kingsshield')return;
consttargetForme=(move.id==='kingsshield'?'Aegislash':'Aegislash-Blade');
if(attacker.species.name!==targetForme)attacker.formeChange(targetForme);
},
isPermanent:true,
name:"StanceChange",
rating:4,
num:176,
},
static:{
onDamagingHit(damage,target,source,move){
if(this.checkMoveMakesContact(move,source,target)){
if(this.randomChance(3,10)){
source.trySetStatus('par',target);
}
}
},
name:"Static",
rating:2,
num:9,
},
steadfast:{
onFlinch(pokemon){
this.boost({spe:1});
},
name:"Steadfast",
rating:1,
num:80,
},
steamengine:{
onDamagingHit(damage,target,source,move){
if(['Water','Fire'].includes(move.type)){
this.boost({spe:6});
}
},
name:"SteamEngine",
rating:2,
num:243,
},
steelworker:{
onModifyAtkPriority:5,
onModifyAtk(atk,attacker,defender,move){
if(move.type==='Steel'){
this.debug('Steelworkerboost');
returnthis.chainModify(1.5);
}
},
onModifySpAPriority:5,
onModifySpA(atk,attacker,defender,move){
if(move.type==='Steel'){
this.debug('Steelworkerboost');
returnthis.chainModify(1.5);
}
},
name:"Steelworker",
rating:3.5,
num:200,
},
steelyspirit:{
onAllyBasePowerPriority:22,
onAllyBasePower(basePower,attacker,defender,move){
if(move.type==='Steel'){
this.debug('SteelySpiritboost');
returnthis.chainModify(1.5);
}
},
name:"SteelySpirit",
rating:3.5,
num:252,
},
stench:{
onModifyMovePriority:-1,
onModifyMove(move){
if(move.category!=="Status"){
this.debug('AddingStenchflinch');
if(!move.secondaries)move.secondaries=[];
for(constsecondaryofmove.secondaries){
if(secondary.volatileStatus==='flinch')return;
}
move.secondaries.push({
chance:10,
volatileStatus:'flinch',
});
}
},
name:"Stench",
rating:0.5,
num:1,
},
stickyhold:{
onTakeItem(item,pokemon,source){
if(!this.activeMove)thrownewError("Battle.activeMoveisnull");
if(!pokemon.hp||pokemon.item==='stickybarb')return;
if((source&&source!==pokemon)||this.activeMove.id==='knockoff'){
this.add('-activate',pokemon,'ability:StickyHold');
returnfalse;
}
},
isBreakable:true,
name:"StickyHold",
rating:1.5,
num:60,
},
stormdrain:{
onTryHit(target,source,move){
if(target!==source&&move.type==='Water'){
if(!this.boost({spa:1})){
this.add('-immune',target,'[from]ability:StormDrain');
}
returnnull;
}
},
onAnyRedirectTarget(target,source,source2,move){
if(move.type!=='Water'||move.flags['pledgecombo'])return;
constredirectTarget=['randomNormal','adjacentFoe'].includes(move.target)?'normal':move.target;
if(this.validTarget(this.effectState.target,source,redirectTarget)){
if(move.smartTarget)move.smartTarget=false;
if(this.effectState.target!==target){
this.add('-activate',this.effectState.target,'ability:StormDrain');
}
returnthis.effectState.target;
}
},
isBreakable:true,
name:"StormDrain",
rating:3,
num:114,
},
strongjaw:{
onBasePowerPriority:19,
onBasePower(basePower,attacker,defender,move){
if(move.flags['bite']){
returnthis.chainModify(1.5);
}
},
name:"StrongJaw",
rating:3.5,
num:173,
},
sturdy:{
onTryHit(pokemon,target,move){
if(move.ohko){
this.add('-immune',pokemon,'[from]ability:Sturdy');
returnnull;
}
},
onDamagePriority:-30,
onDamage(damage,target,source,effect){
if(target.hp===target.maxhp&&damage>=target.hp&&effect&&effect.effectType==='Move'){
this.add('-ability',target,'Sturdy');
returntarget.hp-1;
}
},
isBreakable:true,
name:"Sturdy",
rating:3,
num:5,
},
suctioncups:{
onDragOutPriority:1,
onDragOut(pokemon){
this.add('-activate',pokemon,'ability:SuctionCups');
returnnull;
},
isBreakable:true,
name:"SuctionCups",
rating:1,
num:21,
},
superluck:{
onModifyCritRatio(critRatio){
returncritRatio+1;
},
name:"SuperLuck",
rating:1.5,
num:105,
},
supremeoverlord:{
onStart(pokemon){
if(pokemon.side.totalFainted){
this.add('-activate',pokemon,'ability:SupremeOverlord');
constfallen=Math.min(pokemon.side.totalFainted,5);
this.add('-start',pokemon,`fallen${fallen}`,'[silent]');
this.effectState.fallen=fallen;
}
},
onEnd(pokemon){
this.add('-end',pokemon,`fallen${this.effectState.fallen}`,'[silent]');
},
onBasePowerPriority:21,
onBasePower(basePower,attacker,defender,move){
if(this.effectState.fallen){
constpowMod=[4096,4506,4915,5325,5734,6144];
this.debug(`SupremeOverlordboost:${powMod[this.effectState.fallen]}/4096`);
returnthis.chainModify([powMod[this.effectState.fallen],4096]);
}
},
name:"SupremeOverlord",
rating:4,
num:293,
},
surgesurfer:{
onModifySpe(spe){
if(this.field.isTerrain('electricterrain')){
returnthis.chainModify(2);
}
},
name:"SurgeSurfer",
rating:3,
num:207,
},
swarm:{
onModifyAtkPriority:5,
onModifyAtk(atk,attacker,defender,move){
if(move.type==='Bug'&&attacker.hp<=attacker.maxhp/3){
this.debug('Swarmboost');
returnthis.chainModify(1.5);
}
},
onModifySpAPriority:5,
onModifySpA(atk,attacker,defender,move){
if(move.type==='Bug'&&attacker.hp<=attacker.maxhp/3){
this.debug('Swarmboost');
returnthis.chainModify(1.5);
}
},
name:"Swarm",
rating:2,
num:68,
},
sweetveil:{
name:"SweetVeil",
onAllySetStatus(status,target,source,effect){
if(status.id==='slp'){
this.debug('SweetVeilinterruptssleep');
consteffectHolder=this.effectState.target;
this.add('-block',target,'ability:SweetVeil','[of]'+effectHolder);
returnnull;
}
},
onAllyTryAddVolatile(status,target){
if(status.id==='yawn'){
this.debug('SweetVeilblockingyawn');
consteffectHolder=this.effectState.target;
this.add('-block',target,'ability:SweetVeil','[of]'+effectHolder);
returnnull;
}
},
isBreakable:true,
rating:2,
num:175,
},
swiftswim:{
onModifySpe(spe,pokemon){
if(['raindance','primordialsea'].includes(pokemon.effectiveWeather())){
returnthis.chainModify(2);
}
},
name:"SwiftSwim",
rating:3,
num:33,
},
symbiosis:{
onAllyAfterUseItem(item,pokemon){
if(pokemon.switchFlag)return;
constsource=this.effectState.target;
constmyItem=source.takeItem();
if(!myItem)return;
if(
!this.singleEvent('TakeItem',myItem,source.itemState,pokemon,source,this.effect,myItem)||
!pokemon.setItem(myItem)
){
source.item=myItem.id;
return;
}
this.add('-activate',source,'ability:Symbiosis',myItem,'[of]'+pokemon);
},
name:"Symbiosis",
rating:0,
num:180,
},
synchronize:{
onAfterSetStatus(status,target,source,effect){
if(!source||source===target)return;
if(effect&&effect.id==='toxicspikes')return;
if(status.id==='slp'||status.id==='frz')return;
this.add('-activate',target,'ability:Synchronize');
//Hacktomakestatus-preventionabilitiesthinkSynchronizeisastatusmove
//andshowmessageswhenactivatingagainstit.
source.trySetStatus(status,target,{status:status.id,id:'synchronize'}asEffect);
},
name:"Synchronize",
rating:2,
num:28,
},
swordofruin:{
onStart(pokemon){
if(this.suppressingAbility(pokemon))return;
this.add('-ability',pokemon,'SwordofRuin');
},
onAnyModifyDef(def,target,source,move){
constabilityHolder=this.effectState.target;
if(target.hasAbility('SwordofRuin'))return;
if(!move.ruinedDef?.hasAbility('SwordofRuin'))move.ruinedDef=abilityHolder;
if(move.ruinedDef!==abilityHolder)return;
this.debug('SwordofRuinDefdrop');
returnthis.chainModify(0.75);
},
name:"SwordofRuin",
rating:4.5,
num:285,
},
tabletsofruin:{
onStart(pokemon){
if(this.suppressingAbility(pokemon))return;
this.add('-ability',pokemon,'TabletsofRuin');
},
onAnyModifyAtk(atk,source,target,move){
constabilityHolder=this.effectState.target;
if(source.hasAbility('TabletsofRuin'))return;
if(!move.ruinedAtk)move.ruinedAtk=abilityHolder;
if(move.ruinedAtk!==abilityHolder)return;
this.debug('TabletsofRuinAtkdrop');
returnthis.chainModify(0.75);
},
name:"TabletsofRuin",
rating:4.5,
num:284,
},
tangledfeet:{
onModifyAccuracyPriority:-1,
onModifyAccuracy(accuracy,target){
if(typeofaccuracy!=='number')return;
if(target?.volatiles['confusion']){
this.debug('TangledFeet-decreasingaccuracy');
returnthis.chainModify(0.5);
}
},
isBreakable:true,
name:"TangledFeet",
rating:1,
num:77,
},
tanglinghair:{
onDamagingHit(damage,target,source,move){
if(this.checkMoveMakesContact(move,source,target,true)){
this.add('-ability',target,'TanglingHair');
this.boost({spe:-1},source,target,null,true);
}
},
name:"TanglingHair",
rating:2,
num:221,
},
technician:{
onBasePowerPriority:30,
onBasePower(basePower,attacker,defender,move){
constbasePowerAfterMultiplier=this.modify(basePower,this.event.modifier);
this.debug('BasePower:'+basePowerAfterMultiplier);
if(basePowerAfterMultiplier<=60){
this.debug('Technicianboost');
returnthis.chainModify(1.5);
}
},
name:"Technician",
rating:3.5,
num:101,
},
telepathy:{
onTryHit(target,source,move){
if(target!==source&&target.isAlly(source)&&move.category!=='Status'){
this.add('-activate',target,'ability:Telepathy');
returnnull;
}
},
isBreakable:true,
name:"Telepathy",
rating:0,
num:140,
},
teravolt:{
onStart(pokemon){
this.add('-ability',pokemon,'Teravolt');
},
onModifyMove(move){
move.ignoreAbility=true;
},
name:"Teravolt",
rating:3,
num:164,
},
thermalexchange:{
onDamagingHit(damage,target,source,move){
if(move.type==='Fire'){
this.boost({atk:1});
}
},
onUpdate(pokemon){
if(pokemon.status==='brn'){
this.add('-activate',pokemon,'ability:ThermalExchange');
pokemon.cureStatus();
}
},
onSetStatus(status,target,source,effect){
if(status.id!=='brn')return;
if((effectasMove)?.status){
this.add('-immune',target,'[from]ability:ThermalExchange');
}
returnfalse;
},
name:"ThermalExchange",
rating:2.5,
num:270,
},
thickfat:{
onSourceModifyAtkPriority:6,
onSourceModifyAtk(atk,attacker,defender,move){
if(move.type==='Ice'||move.type==='Fire'){
this.debug('ThickFatweaken');
returnthis.chainModify(0.5);
}
},
onSourceModifySpAPriority:5,
onSourceModifySpA(atk,attacker,defender,move){
if(move.type==='Ice'||move.type==='Fire'){
this.debug('ThickFatweaken');
returnthis.chainModify(0.5);
}
},
isBreakable:true,
name:"ThickFat",
rating:3.5,
num:47,
},
tintedlens:{
onModifyDamage(damage,source,target,move){
if(target.getMoveHitData(move).typeMod<0){
this.debug('TintedLensboost');
returnthis.chainModify(2);
}
},
name:"TintedLens",
rating:4,
num:110,
},
torrent:{
onModifyAtkPriority:5,
onModifyAtk(atk,attacker,defender,move){
if(move.type==='Water'&&attacker.hp<=attacker.maxhp/3){
this.debug('Torrentboost');
returnthis.chainModify(1.5);
}
},
onModifySpAPriority:5,
onModifySpA(atk,attacker,defender,move){
if(move.type==='Water'&&attacker.hp<=attacker.maxhp/3){
this.debug('Torrentboost');
returnthis.chainModify(1.5);
}
},
name:"Torrent",
rating:2,
num:67,
},
toughclaws:{
onBasePowerPriority:21,
onBasePower(basePower,attacker,defender,move){
if(move.flags['contact']){
returnthis.chainModify([5325,4096]);
}
},
name:"ToughClaws",
rating:3.5,
num:181,
},
toxicboost:{
onBasePowerPriority:19,
onBasePower(basePower,attacker,defender,move){
if((attacker.status==='psn'||attacker.status==='tox')&&move.category==='Physical'){
returnthis.chainModify(1.5);
}
},
name:"ToxicBoost",
rating:3,
num:137,
},
toxicdebris:{
onDamagingHit(damage,target,source,move){
constside=source.isAlly(target)?source.side.foe:source.side;
consttoxicSpikes=side.sideConditions['toxicspikes'];
if(move.category==='Physical'&&(!toxicSpikes||toxicSpikes.layers<2)){
this.add('-activate',target,'ability:ToxicDebris');
side.addSideCondition('toxicspikes',target);
}
},
name:"ToxicDebris",
rating:3.5,
num:295,
},
trace:{
onStart(pokemon){
//n.b.onlyaffectsHackmons
//interactionwithNoAbilityiscomplicated:https://www.smogon.com/forums/threads/pokemon-sun-moon-battle-mechanics-research.3586701/page-76#post-7790209
if(pokemon.adjacentFoes().some(foeActive=>foeActive.ability==='noability')){
this.effectState.gaveUp=true;
}
//interactionwithAbilityShieldissimilartoNoAbility
if(pokemon.hasItem('AbilityShield')){
this.add('-block',pokemon,'item:AbilityShield');
this.effectState.gaveUp=true;
}
},
onUpdate(pokemon){
if(!pokemon.isStarted||this.effectState.gaveUp)return;

constadditionalBannedAbilities=[
//ZenModeincludedhereforcompatabilitywithGen5-6
'noability','flowergift','forecast','hungerswitch','illusion','imposter','neutralizinggas','powerofalchemy','receiver','trace','zenmode',
];
constpossibleTargets=pokemon.adjacentFoes().filter(target=>(
!target.getAbility().isPermanent&&!additionalBannedAbilities.includes(target.ability)
));
if(!possibleTargets.length)return;

consttarget=this.sample(possibleTargets);
constability=target.getAbility();
if(pokemon.setAbility(ability)){
this.add('-ability',pokemon,ability,'[from]ability:Trace','[of]'+target);
}
},
name:"Trace",
rating:2.5,
num:36,
},
transistor:{
onModifyAtkPriority:5,
onModifyAtk(atk,attacker,defender,move){
if(move.type==='Electric'){
this.debug('Transistorboost');
returnthis.chainModify(1.5);
}
},
onModifySpAPriority:5,
onModifySpA(atk,attacker,defender,move){
if(move.type==='Electric'){
this.debug('Transistorboost');
returnthis.chainModify(1.5);
}
},
name:"Transistor",
rating:3.5,
num:262,
},
triage:{
onModifyPriority(priority,pokemon,target,move){
if(move?.flags['heal'])returnpriority+3;
},
name:"Triage",
rating:3.5,
num:205,
},
truant:{
onStart(pokemon){
pokemon.removeVolatile('truant');
if(pokemon.activeTurns&&(pokemon.moveThisTurnResult!==undefined||!this.queue.willMove(pokemon))){
pokemon.addVolatile('truant');
}
},
onBeforeMovePriority:9,
onBeforeMove(pokemon){
if(pokemon.removeVolatile('truant')){
this.add('cant',pokemon,'ability:Truant');
returnfalse;
}
pokemon.addVolatile('truant');
},
condition:{},
name:"Truant",
rating:-1,
num:54,
},
turboblaze:{
onStart(pokemon){
this.add('-ability',pokemon,'Turboblaze');
},
onModifyMove(move){
move.ignoreAbility=true;
},
name:"Turboblaze",
rating:3,
num:163,
},
unaware:{
name:"Unaware",
onAnyModifyBoost(boosts,pokemon){
constunawareUser=this.effectState.target;
if(unawareUser===pokemon)return;
if(unawareUser===this.activePokemon&&pokemon===this.activeTarget){
boosts['def']=0;
boosts['spd']=0;
boosts['evasion']=0;
}
if(pokemon===this.activePokemon&&unawareUser===this.activeTarget){
boosts['atk']=0;
boosts['def']=0;
boosts['spa']=0;
boosts['accuracy']=0;
}
},
isBreakable:true,
rating:4,
num:109,
},
unburden:{
onAfterUseItem(item,pokemon){
if(pokemon!==this.effectState.target)return;
pokemon.addVolatile('unburden');
},
onTakeItem(item,pokemon){
pokemon.addVolatile('unburden');
},
onEnd(pokemon){
pokemon.removeVolatile('unburden');
},
condition:{
onModifySpe(spe,pokemon){
if(!pokemon.item&&!pokemon.ignoringAbility()){
returnthis.chainModify(2);
}
},
},
name:"Unburden",
rating:3.5,
num:84,
},
unnerve:{
onPreStart(pokemon){
this.add('-ability',pokemon,'Unnerve');
this.effectState.unnerved=true;
},
onStart(pokemon){
if(this.effectState.unnerved)return;
this.add('-ability',pokemon,'Unnerve');
this.effectState.unnerved=true;
},
onEnd(){
this.effectState.unnerved=false;
},
onFoeTryEatItem(){
return!this.effectState.unnerved;
},
name:"Unnerve",
rating:1,
num:127,
},
unseenfist:{
onModifyMove(move){
if(move.flags['contact'])deletemove.flags['protect'];
},
name:"UnseenFist",
rating:2,
num:260,
},
vesselofruin:{
onStart(pokemon){
if(this.suppressingAbility(pokemon))return;
this.add('-ability',pokemon,'VesselofRuin');
},
onAnyModifySpA(spa,source,target,move){
constabilityHolder=this.effectState.target;
if(source.hasAbility('VesselofRuin'))return;
if(!move.ruinedSpA)move.ruinedSpA=abilityHolder;
if(move.ruinedSpA!==abilityHolder)return;
this.debug('VesselofRuinSpAdrop');
returnthis.chainModify(0.75);
},
name:"VesselofRuin",
rating:4.5,
num:284,
},
victorystar:{
onAnyModifyAccuracyPriority:-1,
onAnyModifyAccuracy(accuracy,target,source){
if(source.isAlly(this.effectState.target)&&typeofaccuracy==='number'){
returnthis.chainModify([4506,4096]);
}
},
name:"VictoryStar",
rating:2,
num:162,
},
vitalspirit:{
onUpdate(pokemon){
if(pokemon.status==='slp'){
this.add('-activate',pokemon,'ability:VitalSpirit');
pokemon.cureStatus();
}
},
onSetStatus(status,target,source,effect){
if(status.id!=='slp')return;
if((effectasMove)?.status){
this.add('-immune',target,'[from]ability:VitalSpirit');
}
returnfalse;
},
isBreakable:true,
name:"VitalSpirit",
rating:1.5,
num:72,
},
voltabsorb:{
onTryHit(target,source,move){
if(target!==source&&move.type==='Electric'){
if(!this.heal(target.baseMaxhp/4)){
this.add('-immune',target,'[from]ability:VoltAbsorb');
}
returnnull;
}
},
isBreakable:true,
name:"VoltAbsorb",
rating:3.5,
num:10,
},
wanderingspirit:{
onDamagingHit(damage,target,source,move){
constadditionalBannedAbilities=['hungerswitch','illusion','neutralizinggas','wonderguard'];
if(source.getAbility().isPermanent||additionalBannedAbilities.includes(source.ability)||
target.volatiles['dynamax']
){
return;
}

if(this.checkMoveMakesContact(move,source,target)){
consttargetCanBeSet=this.runEvent('SetAbility',target,source,this.effect,source.ability);
if(!targetCanBeSet)returntargetCanBeSet;
constsourceAbility=source.setAbility('wanderingspirit',target);
if(!sourceAbility)return;
if(target.isAlly(source)){
this.add('-activate',target,'SkillSwap','','','[of]'+source);
}else{
this.add('-activate',target,'ability:WanderingSpirit',this.dex.abilities.get(sourceAbility).name,'WanderingSpirit','[of]'+source);
}
target.setAbility(sourceAbility);
}
},
name:"WanderingSpirit",
rating:2.5,
num:254,
},
waterabsorb:{
onTryHit(target,source,move){
if(target!==source&&move.type==='Water'){
if(!this.heal(target.baseMaxhp/4)){
this.add('-immune',target,'[from]ability:WaterAbsorb');
}
returnnull;
}
},
isBreakable:true,
name:"WaterAbsorb",
rating:3.5,
num:11,
},
waterbubble:{
onSourceModifyAtkPriority:5,
onSourceModifyAtk(atk,attacker,defender,move){
if(move.type==='Fire'){
returnthis.chainModify(0.5);
}
},
onSourceModifySpAPriority:5,
onSourceModifySpA(atk,attacker,defender,move){
if(move.type==='Fire'){
returnthis.chainModify(0.5);
}
},
onModifyAtk(atk,attacker,defender,move){
if(move.type==='Water'){
returnthis.chainModify(2);
}
},
onModifySpA(atk,attacker,defender,move){
if(move.type==='Water'){
returnthis.chainModify(2);
}
},
onUpdate(pokemon){
if(pokemon.status==='brn'){
this.add('-activate',pokemon,'ability:WaterBubble');
pokemon.cureStatus();
}
},
onSetStatus(status,target,source,effect){
if(status.id!=='brn')return;
if((effectasMove)?.status){
this.add('-immune',target,'[from]ability:WaterBubble');
}
returnfalse;
},
isBreakable:true,
name:"WaterBubble",
rating:4.5,
num:199,
},
watercompaction:{
onDamagingHit(damage,target,source,move){
if(move.type==='Water'){
this.boost({def:2});
}
},
name:"WaterCompaction",
rating:1.5,
num:195,
},
waterveil:{
onUpdate(pokemon){
if(pokemon.status==='brn'){
this.add('-activate',pokemon,'ability:WaterVeil');
pokemon.cureStatus();
}
},
onSetStatus(status,target,source,effect){
if(status.id!=='brn')return;
if((effectasMove)?.status){
this.add('-immune',target,'[from]ability:WaterVeil');
}
returnfalse;
},
isBreakable:true,
name:"WaterVeil",
rating:2,
num:41,
},
weakarmor:{
onDamagingHit(damage,target,source,move){
if(move.category==='Physical'){
this.boost({def:-1,spe:2},target,target);
}
},
name:"WeakArmor",
rating:1,
num:133,
},
wellbakedbody:{
onTryHit(target,source,move){
if(target!==source&&move.type==='Fire'){
if(!this.boost({def:2})){
this.add('-immune',target,'[from]ability:Well-BakedBody');
}
returnnull;
}
},
isBreakable:true,
name:"Well-BakedBody",
rating:3.5,
num:273,
},
whitesmoke:{
onTryBoost(boost,target,source,effect){
if(source&&target===source)return;
letshowMsg=false;
leti:BoostID;
for(iinboost){
if(boost[i]!<0){
deleteboost[i];
showMsg=true;
}
}
if(showMsg&&!(effectasActiveMove).secondaries&&effect.id!=='octolock'){
this.add("-fail",target,"unboost","[from]ability:WhiteSmoke","[of]"+target);
}
},
isBreakable:true,
name:"WhiteSmoke",
rating:2,
num:73,
},
wimpout:{
onEmergencyExit(target){
if(!this.canSwitch(target.side)||target.forceSwitchFlag||target.switchFlag)return;
for(constsideofthis.sides){
for(constactiveofside.active){
active.switchFlag=false;
}
}
target.switchFlag=true;
this.add('-activate',target,'ability:WimpOut');
},
name:"WimpOut",
rating:1,
num:193,
},
windpower:{
onDamagingHitOrder:1,
onDamagingHit(damage,target,source,move){
if(move.flags['wind']){
target.addVolatile('charge');
}
},
onAllySideConditionStart(target,source,sideCondition){
constpokemon=this.effectState.target;
if(sideCondition.id==='tailwind'){
pokemon.addVolatile('charge');
}
},
name:"WindPower",
rating:1,
num:277,
},
windrider:{
onStart(pokemon){
if(pokemon.side.sideConditions['tailwind']){
this.boost({atk:1},pokemon,pokemon);
}
},
onTryHit(target,source,move){
if(target!==source&&move.flags['wind']){
if(!this.boost({atk:1},target,target)){
this.add('-immune',target,'[from]ability:WindRider');
}
returnnull;
}
},
onAllySideConditionStart(target,source,sideCondition){
constpokemon=this.effectState.target;
if(sideCondition.id==='tailwind'){
this.boost({atk:1},pokemon,pokemon);
}
},
name:"WindRider",
rating:3.5,
//WedonotwantBrambleghasttogetInfiltratorinRandbats
num:274,
},
wonderguard:{
onTryHit(target,source,move){
if(target===source||move.category==='Status'||move.type==='???'||move.id==='struggle')return;
if(move.id==='skydrop'&&!source.volatiles['skydrop'])return;
this.debug('WonderGuardimmunity:'+move.id);
if(target.runEffectiveness(move)<=0){
if(move.smartTarget){
move.smartTarget=false;
}else{
this.add('-immune',target,'[from]ability:WonderGuard');
}
returnnull;
}
},
isBreakable:true,
name:"WonderGuard",
rating:5,
num:25,
},
wonderskin:{
onModifyAccuracyPriority:10,
onModifyAccuracy(accuracy,target,source,move){
if(move.category==='Status'&&typeofaccuracy==='number'){
this.debug('WonderSkin-settingaccuracyto50');
return50;
}
},
isBreakable:true,
name:"WonderSkin",
rating:2,
num:147,
},
zenmode:{
onResidualOrder:29,
onResidual(pokemon){
if(pokemon.baseSpecies.baseSpecies!=='Darmanitan'||pokemon.transformed){
return;
}
if(pokemon.hp<=pokemon.maxhp/2&&!['Zen','Galar-Zen'].includes(pokemon.species.forme)){
pokemon.addVolatile('zenmode');
}elseif(pokemon.hp>pokemon.maxhp/2&&['Zen','Galar-Zen'].includes(pokemon.species.forme)){
pokemon.addVolatile('zenmode');//incaseofbaseDarmanitan-Zen
pokemon.removeVolatile('zenmode');
}
},
onEnd(pokemon){
if(!pokemon.volatiles['zenmode']||!pokemon.hp)return;
pokemon.transformed=false;
deletepokemon.volatiles['zenmode'];
if(pokemon.species.baseSpecies==='Darmanitan'&&pokemon.species.battleOnly){
pokemon.formeChange(pokemon.species.battleOnlyasstring,this.effect,false,'[silent]');
}
},
condition:{
onStart(pokemon){
if(!pokemon.species.name.includes('Galar')){
if(pokemon.species.id!=='darmanitanzen')pokemon.formeChange('Darmanitan-Zen');
}else{
if(pokemon.species.id!=='darmanitangalarzen')pokemon.formeChange('Darmanitan-Galar-Zen');
}
},
onEnd(pokemon){
if(['Zen','Galar-Zen'].includes(pokemon.species.forme)){
pokemon.formeChange(pokemon.species.battleOnlyasstring);
}
},
},
isPermanent:true,
name:"ZenMode",
rating:0,
num:161,
},
zerotohero:{
onSwitchOut(pokemon){
if(pokemon.baseSpecies.baseSpecies!=='Palafin'||pokemon.transformed)return;
if(pokemon.species.forme!=='Hero'){
pokemon.formeChange('Palafin-Hero',this.effect,true);
}
},
onSwitchIn(){
this.effectState.switchingIn=true;
},
onStart(pokemon){
if(!this.effectState.switchingIn)return;
this.effectState.switchingIn=false;
if(pokemon.baseSpecies.baseSpecies!=='Palafin'||pokemon.transformed)return;
if(!this.effectState.heroMessageDisplayed&&pokemon.species.forme==='Hero'){
this.add('-activate',pokemon,'ability:ZerotoHero');
this.effectState.heroMessageDisplayed=true;
}
},
isPermanent:true,
name:"ZerotoHero",
rating:5,
num:278,
},

//CAP
mountaineer:{
onDamage(damage,target,source,effect){
if(effect&&effect.id==='stealthrock'){
returnfalse;
}
},
onTryHit(target,source,move){
if(move.type==='Rock'&&!target.activeTurns){
this.add('-immune',target,'[from]ability:Mountaineer');
returnnull;
}
},
isNonstandard:"CAP",
isBreakable:true,
name:"Mountaineer",
rating:3,
num:-2,
},
rebound:{
isNonstandard:"CAP",
name:"Rebound",
onTryHitPriority:1,
onTryHit(target,source,move){
if(this.effectState.target.activeTurns)return;

if(target===source||move.hasBounced||!move.flags['reflectable']){
return;
}
constnewMove=this.dex.getActiveMove(move.id);
newMove.hasBounced=true;
this.actions.useMove(newMove,target,source);
returnnull;
},
onAllyTryHitSide(target,source,move){
if(this.effectState.target.activeTurns)return;

if(target.isAlly(source)||move.hasBounced||!move.flags['reflectable']){
return;
}
constnewMove=this.dex.getActiveMove(move.id);
newMove.hasBounced=true;
this.actions.useMove(newMove,this.effectState.target,source);
returnnull;
},
condition:{
duration:1,
},
isBreakable:true,
rating:3,
num:-3,
},
persistent:{
isNonstandard:"CAP",
name:"Persistent",
//implementedinthecorrespondingmove
rating:3,
num:-4,
},
};
